import { S as SvelteComponentDev, i as init, s as safe_not_equal, D as add_render_callback, e as element, t as text, c as claim_element, b as children, d as claim_text, f as detach, g as attr, h as add_location, j as insert, k as append, w as set_data, E as create_in_transition, n as noop, F as svg_element, G as set_style, a as space, x as empty, H as listen, q as transition_in, I as run_all, J as onMount, v as globals, K as create_out_transition, B as group_outros, r as transition_out, C as check_outros, l as create_slot, o as get_slot_changes, p as get_slot_context, L as createEventDispatcher, m as mount_component, u as destroy_component } from './chunk.1a399abd.js';

function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}

function fade(node, { delay = 0, duration = 400 }) {
    const o = +getComputedStyle(node).opacity;
    return {
        delay,
        duration,
        css: t => `opacity: ${t * o}`
    };
}
function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 }) {
    const style = getComputedStyle(node);
    const target_opacity = +style.opacity;
    const transform = style.transform === 'none' ? '' : style.transform;
    const od = target_opacity * (1 - opacity);
    return {
        delay,
        duration,
        easing,
        css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
    };
}

/* src/components/Hero.svelte generated by Svelte v3.6.2 */

const file = "src/components/Hero.svelte";

// (69:0) {#if visible}
function create_if_block_1(ctx) {
	var h1, t_value = ctx.dispSmall ? ctx.titleSmall : ctx.titleBig, t, h1_intro;

	return {
		c: function create() {
			h1 = element("h1");
			t = text(t_value);
			this.h();
		},

		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t = claim_text(h1_nodes, t_value);
			h1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(h1, "class", "text-display lg-view svelte-1qj7hu6");
			add_location(h1, file, 69, 1, 1143);
		},

		m: function mount(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t);
		},

		p: function update(changed, ctx) {
			if ((changed.dispSmall || changed.titleSmall || changed.titleBig) && t_value !== (t_value = ctx.dispSmall ? ctx.titleSmall : ctx.titleBig)) {
				set_data(t, t_value);
			}
		},

		i: function intro(local) {
			if (!h1_intro) {
				add_render_callback(() => {
					h1_intro = create_in_transition(h1, fade, {});
					h1_intro.start();
				});
			}
		},

		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(h1);
			}
		}
	};
}

// (77:0) {#if visible}
function create_if_block(ctx) {
	var svg_1, path, path_intro;

	return {
		c: function create() {
			svg_1 = svg_element("svg");
			path = svg_element("path");
			this.h();
		},

		l: function claim(nodes) {
			svg_1 = claim_element(nodes, "svg", { xmlns: true, viewBox: true, width: true, height: true, class: true, style: true }, true);
			var svg_1_nodes = children(svg_1);

			path = claim_element(svg_1_nodes, "path", { d: true, opacity: true }, true);
			var path_nodes = children(path);

			path_nodes.forEach(detach);
			svg_1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(path, "d", ctx.svg);
			attr(path, "opacity", "0.6");
			add_location(path, file, 85, 2, 1426);
			attr(svg_1, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg_1, "viewBox", "0 0 64 64");
			attr(svg_1, "width", "64px");
			attr(svg_1, "height", "64px");
			attr(svg_1, "class", "parallax svelte-1qj7hu6");
			set_style(svg_1, "transform", "translate(0, " + ctx.sy * .4 + "px)");
			add_location(svg_1, file, 77, 1, 1259);
		},

		m: function mount(target, anchor) {
			insert(target, svg_1, anchor);
			append(svg_1, path);
		},

		p: function update(changed, ctx) {
			if (changed.svg) {
				attr(path, "d", ctx.svg);
			}

			if (changed.sy) {
				set_style(svg_1, "transform", "translate(0, " + ctx.sy * .4 + "px)");
			}
		},

		i: function intro(local) {
			if (!path_intro) {
				add_render_callback(() => {
					path_intro = create_in_transition(path, fly, {y: -5, delay: 250});
					path_intro.start();
				});
			}
		},

		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(svg_1);
			}
		}
	};
}

function create_fragment(ctx) {
	var scrolling = false, clear_scrolling = () => { scrolling = false; }, scrolling_timeout, t, if_block1_anchor, dispose;

	add_render_callback(ctx.onwindowscroll);

	add_render_callback(ctx.onwindowresize);

	var if_block0 = (ctx.visible) && create_if_block_1(ctx);

	var if_block1 = (ctx.visible) && create_if_block(ctx);

	return {
		c: function create() {
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			this.h();
		},

		l: function claim(nodes) {
			if (if_block0) if_block0.l(nodes);
			t = claim_text(nodes, "\n");
			if (if_block1) if_block1.l(nodes);
			if_block1_anchor = empty();
			this.h();
		},

		h: function hydrate() {
			dispose = [
				listen(window, "scroll", () => {
					scrolling = true;
					clearTimeout(scrolling_timeout);
					scrolling_timeout = setTimeout(clear_scrolling, 100);
					ctx.onwindowscroll();
				}),
				listen(window, "resize", ctx.onwindowresize)
			];
		},

		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
		},

		p: function update(changed, ctx) {
			if (changed.sy && !scrolling) {
				scrolling = true;
				clearTimeout(scrolling_timeout);
				scrollTo(window.pageXOffset, ctx.sy);
				scrolling_timeout = setTimeout(clear_scrolling, 100);
			}

			if (ctx.visible) {
				if (if_block0) {
					if_block0.p(changed, ctx);
					transition_in(if_block0, 1);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (ctx.visible) {
				if (if_block1) {
					if_block1.p(changed, ctx);
					transition_in(if_block1, 1);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},

		i: function intro(local) {
			transition_in(if_block0);
			transition_in(if_block1);
		},

		o: noop,

		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);

			if (detaching) {
				detach(t);
			}

			if (if_block1) if_block1.d(detaching);

			if (detaching) {
				detach(if_block1_anchor);
			}

			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	

	let visible = false;

	let { svg, titleBig, titleSmall } = $$props;

	let sy = 0;
	let iw = 0;

	onMount(()=> {
		$$invalidate('visible', visible = true);
	});

	const writable_props = ['svg', 'titleBig', 'titleSmall'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Hero> was created with unknown prop '${key}'`);
	});

	function onwindowscroll() {
		sy = window.pageYOffset; $$invalidate('sy', sy);
	}

	function onwindowresize() {
		iw = window.innerWidth; $$invalidate('iw', iw);
	}

	$$self.$set = $$props => {
		if ('svg' in $$props) $$invalidate('svg', svg = $$props.svg);
		if ('titleBig' in $$props) $$invalidate('titleBig', titleBig = $$props.titleBig);
		if ('titleSmall' in $$props) $$invalidate('titleSmall', titleSmall = $$props.titleSmall);
	};

	let dispSmall;

	$$self.$$.update = ($$dirty = { iw: 1 }) => {
		if ($$dirty.iw) { $$invalidate('dispSmall', dispSmall = iw <= 1000); }
	};

	return {
		visible,
		svg,
		titleBig,
		titleSmall,
		sy,
		iw,
		dispSmall,
		onwindowscroll,
		onwindowresize
	};
}

class Hero extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, ["svg", "titleBig", "titleSmall"]);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.svg === undefined && !('svg' in props)) {
			console.warn("<Hero> was created without expected prop 'svg'");
		}
		if (ctx.titleBig === undefined && !('titleBig' in props)) {
			console.warn("<Hero> was created without expected prop 'titleBig'");
		}
		if (ctx.titleSmall === undefined && !('titleSmall' in props)) {
			console.warn("<Hero> was created without expected prop 'titleSmall'");
		}
	}

	get svg() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set svg(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get titleBig() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set titleBig(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get titleSmall() {
		throw new Error("<Hero>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set titleSmall(value) {
		throw new Error("<Hero>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/WeAre.svelte generated by Svelte v3.6.2 */
const { Error: Error_1 } = globals;

const file$1 = "src/components/WeAre.svelte";

// (65:8) {#if weAreVisible}
function create_if_block_1$1(ctx) {
	var span, t, span_intro;

	return {
		c: function create() {
			span = element("span");
			t = text("We are");
			this.h();
		},

		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t = claim_text(span_nodes, "We are");
			span_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(span, "class", "formal");
			add_location(span, file$1, 65, 12, 1423);
		},

		m: function mount(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},

		i: function intro(local) {
			if (!span_intro) {
				add_render_callback(() => {
					span_intro = create_in_transition(span, fade, {});
					span_intro.start();
				});
			}
		},

		o: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(span);
			}
		}
	};
}

// (68:8) {#if visible}
function create_if_block$1(ctx) {
	var span, t_value = ctx.brotherLabels[ctx.wordIndex], t, span_intro, span_outro, current;

	return {
		c: function create() {
			span = element("span");
			t = text(t_value);
			this.h();
		},

		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true }, false);
			var span_nodes = children(span);

			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(span, "class", "formal");
			add_location(span, file$1, 68, 12, 1515);
		},

		m: function mount(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
			current = true;
		},

		p: function update(changed, ctx) {
			if ((!current || changed.brotherLabels || changed.wordIndex) && t_value !== (t_value = ctx.brotherLabels[ctx.wordIndex])) {
				set_data(t, t_value);
			}
		},

		i: function intro(local) {
			if (current) return;
			add_render_callback(() => {
				if (span_outro) span_outro.end(1);
				if (!span_intro) span_intro = create_in_transition(span, ctx.typewriter, {});
				span_intro.start();
			});

			current = true;
		},

		o: function outro(local) {
			if (span_intro) span_intro.invalidate();

			span_outro = create_out_transition(span, fade, {duration: 280});

			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(span);
				if (span_outro) span_outro.end();
			}
		}
	};
}

function create_fragment$1(ctx) {
	var section, h1, t, current;

	var if_block0 = (ctx.weAreVisible) && create_if_block_1$1();

	var if_block1 = (ctx.visible) && create_if_block$1(ctx);

	return {
		c: function create() {
			section = element("section");
			h1 = element("h1");
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			this.h();
		},

		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", {}, false);
			var section_nodes = children(section);

			h1 = claim_element(section_nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			if (if_block0) if_block0.l(h1_nodes);
			t = claim_text(h1_nodes, "\n        ");
			if (if_block1) if_block1.l(h1_nodes);
			h1_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(h1, "class", "svelte-tjniru");
			add_location(h1, file$1, 63, 4, 1379);
			add_location(section, file$1, 62, 0, 1365);
		},

		m: function mount(target, anchor) {
			insert(target, section, anchor);
			append(section, h1);
			if (if_block0) if_block0.m(h1, null);
			append(h1, t);
			if (if_block1) if_block1.m(h1, null);
			current = true;
		},

		p: function update(changed, ctx) {
			if (ctx.weAreVisible) {
				if (!if_block0) {
					if_block0 = create_if_block_1$1();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(h1, t);
				} else {
									transition_in(if_block0, 1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (ctx.visible) {
				if (if_block1) {
					if_block1.p(changed, ctx);
					transition_in(if_block1, 1);
				} else {
					if_block1 = create_if_block$1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(h1, null);
				}
			} else if (if_block1) {
				group_outros();
				transition_out(if_block1, 1, () => {
					if_block1 = null;
				});
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},

		o: function outro(local) {
			transition_out(if_block1);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(section);
			}

			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	

    let { brotherLabels } = $$props;

    let visible = false;
    let weAreVisible = false;
    let wordIndex = 0;

    onMount(() => {
        $$invalidate('weAreVisible', weAreVisible = true);
        setInterval(() => {
            $$invalidate('visible', visible = true);
            setTimeout(() => {
                $$invalidate('visible', visible = false);
                $$invalidate('wordIndex', wordIndex = pickNextIndex(wordIndex));
            }, 1000);
        }, 1500);
    });

    function pickNextIndex(curIndex) {
        let nextIndex = Math.floor(Math.random() * brotherLabels.length);
        if (nextIndex === curIndex) {
            return (curIndex + 1) % brotherLabels.length
        }
        return nextIndex;
    }


    function typewriter(node, { speed = 50 }) {
		if (wordIndex < 0 || wordIndex >= brotherLabels.length) {
			throw new Error(`wordIndex out of bounds.`);
		}
            
		const text = brotherLabels[wordIndex];
        const duration = text.length * speed;

		return {
			duration,
			tick: t => {
				const i = ~~(text.length * t);
				node.textContent = text.slice(0, i);
			}
        };
	}

	const writable_props = ['brotherLabels'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<WeAre> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ('brotherLabels' in $$props) $$invalidate('brotherLabels', brotherLabels = $$props.brotherLabels);
	};

	return {
		brotherLabels,
		visible,
		weAreVisible,
		wordIndex,
		typewriter
	};
}

class WeAre extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, ["brotherLabels"]);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.brotherLabels === undefined && !('brotherLabels' in props)) {
			console.warn("<WeAre> was created without expected prop 'brotherLabels'");
		}
	}

	get brotherLabels() {
		throw new Error_1("<WeAre>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set brotherLabels(value) {
		throw new Error_1("<WeAre>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Modal.svelte generated by Svelte v3.6.2 */

const file$2 = "src/components/Modal.svelte";

const get_header_slot_changes = () => ({});
const get_header_slot_context = () => ({});

function create_fragment$2(ctx) {
	var div0, t0, div1, section, t1, button, t2, t3, hr0, t4, t5, hr1, current, dispose;

	const header_slot_1 = ctx.$$slots.header;
	const header_slot = create_slot(header_slot_1, ctx, get_header_slot_context);

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	return {
		c: function create() {
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			section = element("section");

			if (header_slot) header_slot.c();
			t1 = space();
			button = element("button");
			t2 = text("X");
			t3 = space();
			hr0 = element("hr");
			t4 = space();

			if (default_slot) default_slot.c();
			t5 = space();
			hr1 = element("hr");
			this.h();
		},

		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			div0_nodes.forEach(detach);
			t0 = claim_text(nodes, "\n\n");

			div1 = claim_element(nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			section = claim_element(div1_nodes, "SECTION", { class: true }, false);
			var section_nodes = children(section);

			if (header_slot) header_slot.l(section_nodes);
			t1 = claim_text(section_nodes, "\n        ");

			button = claim_element(section_nodes, "BUTTON", { class: true }, false);
			var button_nodes = children(button);

			t2 = claim_text(button_nodes, "X");
			button_nodes.forEach(detach);
			section_nodes.forEach(detach);
			t3 = claim_text(div1_nodes, "\n\t");

			hr0 = claim_element(div1_nodes, "HR", {}, false);
			var hr0_nodes = children(hr0);

			hr0_nodes.forEach(detach);
			t4 = claim_text(div1_nodes, "\n\t");

			if (default_slot) default_slot.l(div1_nodes);
			t5 = claim_text(div1_nodes, "\n\t");

			hr1 = claim_element(div1_nodes, "HR", {}, false);
			var hr1_nodes = children(hr1);

			hr1_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(div0, "class", "modal-background svelte-wuam0n");
			add_location(div0, file$2, 64, 0, 1133);

			attr(button, "class", "svelte-wuam0n");
			add_location(button, file$2, 69, 8, 1299);
			attr(section, "class", "header svelte-wuam0n");
			add_location(section, file$2, 67, 4, 1232);
			add_location(hr0, file$2, 71, 1, 1371);

			add_location(hr1, file$2, 73, 1, 1392);
			attr(div1, "class", "modal svelte-wuam0n");
			add_location(div1, file$2, 66, 0, 1208);

			dispose = [
				listen(div0, "click", ctx.click_handler),
				listen(button, "click", ctx.click_handler_1)
			];
		},

		m: function mount(target, anchor) {
			insert(target, div0, anchor);
			insert(target, t0, anchor);
			insert(target, div1, anchor);
			append(div1, section);

			if (header_slot) {
				header_slot.m(section, null);
			}

			append(section, t1);
			append(section, button);
			append(button, t2);
			append(div1, t3);
			append(div1, hr0);
			append(div1, t4);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append(div1, t5);
			append(div1, hr1);
			current = true;
		},

		p: function update(changed, ctx) {
			if (header_slot && header_slot.p && changed.$$scope) {
				header_slot.p(get_slot_changes(header_slot_1, ctx, changed, get_header_slot_changes), get_slot_context(header_slot_1, ctx, get_header_slot_context));
			}

			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(header_slot, local);
			transition_in(default_slot, local);
			current = true;
		},

		o: function outro(local) {
			transition_out(header_slot, local);
			transition_out(default_slot, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div0);
				detach(t0);
				detach(div1);
			}

			if (header_slot) header_slot.d(detaching);

			if (default_slot) default_slot.d(detaching);
			run_all(dispose);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();

	let { $$slots = {}, $$scope } = $$props;

	function click_handler() {
		return dispatch("close");
	}

	function click_handler_1() {
		return dispatch("close");
	}

	$$self.$set = $$props => {
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return {
		dispatch,
		click_handler,
		click_handler_1,
		$$slots,
		$$scope
	};
}

class Modal extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, []);
	}
}

/* src/components/Pillars.svelte generated by Svelte v3.6.2 */

const file$3 = "src/components/Pillars.svelte";

// (76:0) {#if broVis}
function create_if_block_2(ctx) {
	var current;

	var modal = new Modal({
		props: {
		$$slots: {
		default: [create_default_slot_2],
		header: [create_header_slot_2]
	},
		$$scope: { ctx }
	},
		$$inline: true
	});
	modal.$on("close", ctx.close_handler);

	return {
		c: function create() {
			modal.$$.fragment.c();
		},

		l: function claim(nodes) {
			modal.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(modal, target, anchor);
			current = true;
		},

		i: function intro(local) {
			if (current) return;
			transition_in(modal.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(modal.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(modal, detaching);
		}
	};
}

// (78:8) <h2 class="modal-li" slot="header">
function create_header_slot_2(ctx) {
	var h2, t;

	return {
		c: function create() {
			h2 = element("h2");
			t = text("Brotherhood");
			this.h();
		},

		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true, slot: true }, false);
			var h2_nodes = children(h2);

			t = claim_text(h2_nodes, "Brotherhood");
			h2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(h2, "class", "modal-li svelte-6aq29p");
			attr(h2, "slot", "header");
			add_location(h2, file$3, 77, 8, 1680);
		},

		m: function mount(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h2);
			}
		}
	};
}

// (77:4) <Modal on:close="{() => broVis = false}">
function create_default_slot_2(ctx) {
	var t0, ul, li0, t1, t2, li1, t3, t4, li2, t5, t6, li3, t7, t8, li4, t9, t10, img;

	return {
		c: function create() {
			t0 = space();
			ul = element("ul");
			li0 = element("li");
			t1 = text("Lorem ipsum");
			t2 = space();
			li1 = element("li");
			t3 = text("Lorem ipsum");
			t4 = space();
			li2 = element("li");
			t5 = text("Lorem ipsum");
			t6 = space();
			li3 = element("li");
			t7 = text("Lorem ipsum");
			t8 = space();
			li4 = element("li");
			t9 = text("Lorem ipsum");
			t10 = space();
			img = element("img");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "\n        ");

			ul = claim_element(nodes, "UL", {}, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li0_nodes = children(li0);

			t1 = claim_text(li0_nodes, "Lorem ipsum");
			li0_nodes.forEach(detach);
			t2 = claim_text(ul_nodes, "\n            ");

			li1 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li1_nodes = children(li1);

			t3 = claim_text(li1_nodes, "Lorem ipsum");
			li1_nodes.forEach(detach);
			t4 = claim_text(ul_nodes, "\n            ");

			li2 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li2_nodes = children(li2);

			t5 = claim_text(li2_nodes, "Lorem ipsum");
			li2_nodes.forEach(detach);
			t6 = claim_text(ul_nodes, "\n            ");

			li3 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li3_nodes = children(li3);

			t7 = claim_text(li3_nodes, "Lorem ipsum");
			li3_nodes.forEach(detach);
			t8 = claim_text(ul_nodes, "\n            ");

			li4 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li4_nodes = children(li4);

			t9 = claim_text(li4_nodes, "Lorem ipsum");
			li4_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			t10 = claim_text(nodes, "\n        ");

			img = claim_element(nodes, "IMG", { src: true, alt: true, width: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(li0, "class", "modal-li svelte-6aq29p");
			add_location(li0, file$3, 79, 12, 1757);
			attr(li1, "class", "modal-li svelte-6aq29p");
			add_location(li1, file$3, 80, 12, 1807);
			attr(li2, "class", "modal-li svelte-6aq29p");
			add_location(li2, file$3, 81, 12, 1857);
			attr(li3, "class", "modal-li svelte-6aq29p");
			add_location(li3, file$3, 82, 12, 1907);
			attr(li4, "class", "modal-li svelte-6aq29p");
			add_location(li4, file$3, 83, 12, 1957);
			add_location(ul, file$3, 78, 8, 1740);
			attr(img, "src", "images/sigma_fun.jpg");
			attr(img, "alt", "sigmas having fun");
			attr(img, "width", "100%");
			add_location(img, file$3, 85, 8, 2017);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, ul, anchor);
			append(ul, li0);
			append(li0, t1);
			append(ul, t2);
			append(ul, li1);
			append(li1, t3);
			append(ul, t4);
			append(ul, li2);
			append(li2, t5);
			append(ul, t6);
			append(ul, li3);
			append(li3, t7);
			append(ul, t8);
			append(ul, li4);
			append(li4, t9);
			insert(target, t10, anchor);
			insert(target, img, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(ul);
				detach(t10);
				detach(img);
			}
		}
	};
}

// (90:0) {#if philVis}
function create_if_block_1$2(ctx) {
	var current;

	var modal = new Modal({
		props: {
		$$slots: {
		default: [create_default_slot_1],
		header: [create_header_slot_1]
	},
		$$scope: { ctx }
	},
		$$inline: true
	});
	modal.$on("close", ctx.close_handler_1);

	return {
		c: function create() {
			modal.$$.fragment.c();
		},

		l: function claim(nodes) {
			modal.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(modal, target, anchor);
			current = true;
		},

		i: function intro(local) {
			if (current) return;
			transition_in(modal.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(modal.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(modal, detaching);
		}
	};
}

// (92:8) <h2 class="modal-li" slot="header">
function create_header_slot_1(ctx) {
	var h2, t;

	return {
		c: function create() {
			h2 = element("h2");
			t = text("Philanthropy");
			this.h();
		},

		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true, slot: true }, false);
			var h2_nodes = children(h2);

			t = claim_text(h2_nodes, "Philanthropy");
			h2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(h2, "class", "modal-li svelte-6aq29p");
			attr(h2, "slot", "header");
			add_location(h2, file$3, 91, 8, 2176);
		},

		m: function mount(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h2);
			}
		}
	};
}

// (91:4) <Modal on:close="{() => philVis = false}">
function create_default_slot_1(ctx) {
	var t0, ul, li0, t1, t2, li1, t3, t4, li2, t5, t6, li3, t7, t8, li4, t9, t10, img;

	return {
		c: function create() {
			t0 = space();
			ul = element("ul");
			li0 = element("li");
			t1 = text("Lorem ipsum");
			t2 = space();
			li1 = element("li");
			t3 = text("Lorem ipsum");
			t4 = space();
			li2 = element("li");
			t5 = text("Lorem ipsum");
			t6 = space();
			li3 = element("li");
			t7 = text("Lorem ipsum");
			t8 = space();
			li4 = element("li");
			t9 = text("Lorem ipsum");
			t10 = space();
			img = element("img");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "\n        ");

			ul = claim_element(nodes, "UL", {}, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li0_nodes = children(li0);

			t1 = claim_text(li0_nodes, "Lorem ipsum");
			li0_nodes.forEach(detach);
			t2 = claim_text(ul_nodes, "\n            ");

			li1 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li1_nodes = children(li1);

			t3 = claim_text(li1_nodes, "Lorem ipsum");
			li1_nodes.forEach(detach);
			t4 = claim_text(ul_nodes, "\n            ");

			li2 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li2_nodes = children(li2);

			t5 = claim_text(li2_nodes, "Lorem ipsum");
			li2_nodes.forEach(detach);
			t6 = claim_text(ul_nodes, "\n            ");

			li3 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li3_nodes = children(li3);

			t7 = claim_text(li3_nodes, "Lorem ipsum");
			li3_nodes.forEach(detach);
			t8 = claim_text(ul_nodes, "\n            ");

			li4 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li4_nodes = children(li4);

			t9 = claim_text(li4_nodes, "Lorem ipsum");
			li4_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			t10 = claim_text(nodes, "\n        ");

			img = claim_element(nodes, "IMG", { src: true, alt: true, width: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(li0, "class", "modal-li svelte-6aq29p");
			add_location(li0, file$3, 93, 12, 2254);
			attr(li1, "class", "modal-li svelte-6aq29p");
			add_location(li1, file$3, 94, 12, 2304);
			attr(li2, "class", "modal-li svelte-6aq29p");
			add_location(li2, file$3, 95, 12, 2354);
			attr(li3, "class", "modal-li svelte-6aq29p");
			add_location(li3, file$3, 96, 12, 2404);
			attr(li4, "class", "modal-li svelte-6aq29p");
			add_location(li4, file$3, 97, 12, 2454);
			add_location(ul, file$3, 92, 8, 2237);
			attr(img, "src", "images/sigma_fun.jpg");
			attr(img, "alt", "sigmas having fun");
			attr(img, "width", "100%");
			add_location(img, file$3, 99, 8, 2514);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, ul, anchor);
			append(ul, li0);
			append(li0, t1);
			append(ul, t2);
			append(ul, li1);
			append(li1, t3);
			append(ul, t4);
			append(ul, li2);
			append(li2, t5);
			append(ul, t6);
			append(ul, li3);
			append(li3, t7);
			append(ul, t8);
			append(ul, li4);
			append(li4, t9);
			insert(target, t10, anchor);
			insert(target, img, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(ul);
				detach(t10);
				detach(img);
			}
		}
	};
}

// (104:0) {#if proVis}
function create_if_block$2(ctx) {
	var current;

	var modal = new Modal({
		props: {
		$$slots: {
		default: [create_default_slot],
		header: [create_header_slot]
	},
		$$scope: { ctx }
	},
		$$inline: true
	});
	modal.$on("close", ctx.close_handler_2);

	return {
		c: function create() {
			modal.$$.fragment.c();
		},

		l: function claim(nodes) {
			modal.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(modal, target, anchor);
			current = true;
		},

		i: function intro(local) {
			if (current) return;
			transition_in(modal.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(modal.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(modal, detaching);
		}
	};
}

// (106:8) <h2 class="modal-li" slot="header">
function create_header_slot(ctx) {
	var h2, t;

	return {
		c: function create() {
			h2 = element("h2");
			t = text("Professionalism");
			this.h();
		},

		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true, slot: true }, false);
			var h2_nodes = children(h2);

			t = claim_text(h2_nodes, "Professionalism");
			h2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(h2, "class", "modal-li svelte-6aq29p");
			attr(h2, "slot", "header");
			add_location(h2, file$3, 105, 8, 2671);
		},

		m: function mount(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h2);
			}
		}
	};
}

// (105:4) <Modal on:close="{() => proVis = false}">
function create_default_slot(ctx) {
	var t0, ul, li0, t1, t2, li1, t3, t4, li2, t5, t6, li3, t7, t8, li4, t9, t10, img;

	return {
		c: function create() {
			t0 = space();
			ul = element("ul");
			li0 = element("li");
			t1 = text("Lorem ipsum");
			t2 = space();
			li1 = element("li");
			t3 = text("Lorem ipsum");
			t4 = space();
			li2 = element("li");
			t5 = text("Lorem ipsum");
			t6 = space();
			li3 = element("li");
			t7 = text("Lorem ipsum");
			t8 = space();
			li4 = element("li");
			t9 = text("Lorem ipsum");
			t10 = space();
			img = element("img");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "\n        ");

			ul = claim_element(nodes, "UL", {}, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li0_nodes = children(li0);

			t1 = claim_text(li0_nodes, "Lorem ipsum");
			li0_nodes.forEach(detach);
			t2 = claim_text(ul_nodes, "\n            ");

			li1 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li1_nodes = children(li1);

			t3 = claim_text(li1_nodes, "Lorem ipsum");
			li1_nodes.forEach(detach);
			t4 = claim_text(ul_nodes, "\n            ");

			li2 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li2_nodes = children(li2);

			t5 = claim_text(li2_nodes, "Lorem ipsum");
			li2_nodes.forEach(detach);
			t6 = claim_text(ul_nodes, "\n            ");

			li3 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li3_nodes = children(li3);

			t7 = claim_text(li3_nodes, "Lorem ipsum");
			li3_nodes.forEach(detach);
			t8 = claim_text(ul_nodes, "\n            ");

			li4 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li4_nodes = children(li4);

			t9 = claim_text(li4_nodes, "Lorem ipsum");
			li4_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			t10 = claim_text(nodes, "\n        ");

			img = claim_element(nodes, "IMG", { src: true, alt: true, width: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(li0, "class", "modal-li svelte-6aq29p");
			add_location(li0, file$3, 107, 12, 2752);
			attr(li1, "class", "modal-li svelte-6aq29p");
			add_location(li1, file$3, 108, 12, 2802);
			attr(li2, "class", "modal-li svelte-6aq29p");
			add_location(li2, file$3, 109, 12, 2852);
			attr(li3, "class", "modal-li svelte-6aq29p");
			add_location(li3, file$3, 110, 12, 2902);
			attr(li4, "class", "modal-li svelte-6aq29p");
			add_location(li4, file$3, 111, 12, 2952);
			add_location(ul, file$3, 106, 8, 2735);
			attr(img, "src", "images/sigma_fun.jpg");
			attr(img, "alt", "sigmas having fun");
			attr(img, "width", "100%");
			add_location(img, file$3, 113, 8, 3012);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, ul, anchor);
			append(ul, li0);
			append(li0, t1);
			append(ul, t2);
			append(ul, li1);
			append(li1, t3);
			append(ul, t4);
			append(ul, li2);
			append(li2, t5);
			append(ul, t6);
			append(ul, li3);
			append(li3, t7);
			append(ul, t8);
			append(ul, li4);
			append(li4, t9);
			insert(target, t10, anchor);
			insert(target, img, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(ul);
				detach(t10);
				detach(img);
			}
		}
	};
}

function create_fragment$3(ctx) {
	var ul, li0, img0, t0, span0, t1, t2, li1, img1, t3, span1, t4, t5, li2, img2, t6, span2, t7, t8, t9, t10, if_block2_anchor, current, dispose;

	var if_block0 = (ctx.broVis) && create_if_block_2(ctx);

	var if_block1 = (ctx.philVis) && create_if_block_1$2(ctx);

	var if_block2 = (ctx.proVis) && create_if_block$2(ctx);

	return {
		c: function create() {
			ul = element("ul");
			li0 = element("li");
			img0 = element("img");
			t0 = space();
			span0 = element("span");
			t1 = text("Brotherhood");
			t2 = space();
			li1 = element("li");
			img1 = element("img");
			t3 = space();
			span1 = element("span");
			t4 = text("Philanthropy");
			t5 = space();
			li2 = element("li");
			img2 = element("img");
			t6 = space();
			span2 = element("span");
			t7 = text("Professionalism");
			t8 = space();
			if (if_block0) if_block0.c();
			t9 = space();
			if (if_block1) if_block1.c();
			t10 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
			this.h();
		},

		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li0_nodes = children(li0);

			img0 = claim_element(li0_nodes, "IMG", { src: true, alt: true, class: true }, false);
			var img0_nodes = children(img0);

			img0_nodes.forEach(detach);
			t0 = claim_text(li0_nodes, "\n        ");

			span0 = claim_element(li0_nodes, "SPAN", { class: true }, false);
			var span0_nodes = children(span0);

			t1 = claim_text(span0_nodes, "Brotherhood");
			span0_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			t2 = claim_text(ul_nodes, "\n    ");

			li1 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li1_nodes = children(li1);

			img1 = claim_element(li1_nodes, "IMG", { src: true, alt: true, class: true }, false);
			var img1_nodes = children(img1);

			img1_nodes.forEach(detach);
			t3 = claim_text(li1_nodes, "\n        ");

			span1 = claim_element(li1_nodes, "SPAN", { class: true }, false);
			var span1_nodes = children(span1);

			t4 = claim_text(span1_nodes, "Philanthropy");
			span1_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			t5 = claim_text(ul_nodes, "\n    ");

			li2 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li2_nodes = children(li2);

			img2 = claim_element(li2_nodes, "IMG", { src: true, alt: true, class: true }, false);
			var img2_nodes = children(img2);

			img2_nodes.forEach(detach);
			t6 = claim_text(li2_nodes, "\n        ");

			span2 = claim_element(li2_nodes, "SPAN", { class: true }, false);
			var span2_nodes = children(span2);

			t7 = claim_text(span2_nodes, "Professionalism");
			span2_nodes.forEach(detach);
			li2_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			t8 = claim_text(nodes, "\n\n");
			if (if_block0) if_block0.l(nodes);
			t9 = claim_text(nodes, "\n\n");
			if (if_block1) if_block1.l(nodes);
			t10 = claim_text(nodes, "\n\n");
			if (if_block2) if_block2.l(nodes);
			if_block2_anchor = empty();
			this.h();
		},

		h: function hydrate() {
			attr(img0, "src", "icons/pillar-white.png");
			attr(img0, "alt", "pillar");
			attr(img0, "class", "svelte-6aq29p");
			add_location(img0, file$3, 62, 8, 1231);
			attr(span0, "class", "svelte-6aq29p");
			add_location(span0, file$3, 63, 8, 1287);
			attr(li0, "class", "svelte-6aq29p");
			add_location(li0, file$3, 61, 4, 1187);
			attr(img1, "src", "icons/pillar-white.png");
			attr(img1, "alt", "pillar");
			attr(img1, "class", "svelte-6aq29p");
			add_location(img1, file$3, 66, 8, 1371);
			attr(span1, "class", "svelte-6aq29p");
			add_location(span1, file$3, 67, 8, 1427);
			attr(li1, "class", "svelte-6aq29p");
			add_location(li1, file$3, 65, 4, 1326);
			attr(img2, "src", "icons/pillar-white.png");
			attr(img2, "alt", "pillar");
			attr(img2, "class", "svelte-6aq29p");
			add_location(img2, file$3, 70, 8, 1511);
			attr(span2, "class", "svelte-6aq29p");
			add_location(span2, file$3, 71, 8, 1567);
			attr(li2, "class", "svelte-6aq29p");
			add_location(li2, file$3, 69, 4, 1467);
			attr(ul, "class", "pillared svelte-6aq29p");
			add_location(ul, file$3, 60, 0, 1161);

			dispose = [
				listen(li0, "click", ctx.click_handler),
				listen(li1, "click", ctx.click_handler_1),
				listen(li2, "click", ctx.click_handler_2)
			];
		},

		m: function mount(target, anchor) {
			insert(target, ul, anchor);
			append(ul, li0);
			append(li0, img0);
			append(li0, t0);
			append(li0, span0);
			append(span0, t1);
			append(ul, t2);
			append(ul, li1);
			append(li1, img1);
			append(li1, t3);
			append(li1, span1);
			append(span1, t4);
			append(ul, t5);
			append(ul, li2);
			append(li2, img2);
			append(li2, t6);
			append(li2, span2);
			append(span2, t7);
			insert(target, t8, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t9, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t10, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (ctx.broVis) {
				if (!if_block0) {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t9.parentNode, t9);
				} else {
									transition_in(if_block0, 1);
				}
			} else if (if_block0) {
				group_outros();
				transition_out(if_block0, 1, () => {
					if_block0 = null;
				});
				check_outros();
			}

			if (ctx.philVis) {
				if (!if_block1) {
					if_block1 = create_if_block_1$2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t10.parentNode, t10);
				} else {
									transition_in(if_block1, 1);
				}
			} else if (if_block1) {
				group_outros();
				transition_out(if_block1, 1, () => {
					if_block1 = null;
				});
				check_outros();
			}

			if (ctx.proVis) {
				if (!if_block2) {
					if_block2 = create_if_block$2(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				} else {
									transition_in(if_block2, 1);
				}
			} else if (if_block2) {
				group_outros();
				transition_out(if_block2, 1, () => {
					if_block2 = null;
				});
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},

		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(ul);
				detach(t8);
			}

			if (if_block0) if_block0.d(detaching);

			if (detaching) {
				detach(t9);
			}

			if (if_block1) if_block1.d(detaching);

			if (detaching) {
				detach(t10);
			}

			if (if_block2) if_block2.d(detaching);

			if (detaching) {
				detach(if_block2_anchor);
			}

			run_all(dispose);
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	

    let broVis = false;
    let philVis = false;
    let proVis = false;

	function click_handler() {
		const $$result = broVis = true;
		$$invalidate('broVis', broVis);
		return $$result;
	}

	function click_handler_1() {
		const $$result = philVis = true;
		$$invalidate('philVis', philVis);
		return $$result;
	}

	function click_handler_2() {
		const $$result = proVis = true;
		$$invalidate('proVis', proVis);
		return $$result;
	}

	function close_handler() {
		const $$result = broVis = false;
		$$invalidate('broVis', broVis);
		return $$result;
	}

	function close_handler_1() {
		const $$result = philVis = false;
		$$invalidate('philVis', philVis);
		return $$result;
	}

	function close_handler_2() {
		const $$result = proVis = false;
		$$invalidate('proVis', proVis);
		return $$result;
	}

	return {
		broVis,
		philVis,
		proVis,
		click_handler,
		click_handler_1,
		click_handler_2,
		close_handler,
		close_handler_1,
		close_handler_2
	};
}

class Pillars extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, []);
	}
}

/* src/components/Card.svelte generated by Svelte v3.6.2 */

const file$4 = "src/components/Card.svelte";

const get_right_slot_changes = () => ({});
const get_right_slot_context = () => ({});

const get_left_slot_changes = () => ({});
const get_left_slot_context = () => ({});

const get_header_slot_changes$1 = () => ({});
const get_header_slot_context$1 = () => ({ class: `header svelte-1laj3e` });

function create_fragment$4(ctx) {
	var section2, t0, hr, t1, div, section0, t2, section1, current;

	const header_slot_1 = ctx.$$slots.header;
	const header_slot = create_slot(header_slot_1, ctx, get_header_slot_context$1);

	const left_slot_1 = ctx.$$slots.left;
	const left_slot = create_slot(left_slot_1, ctx, get_left_slot_context);

	const right_slot_1 = ctx.$$slots.right;
	const right_slot = create_slot(right_slot_1, ctx, get_right_slot_context);

	return {
		c: function create() {
			section2 = element("section");

			if (header_slot) header_slot.c();
			t0 = space();
			hr = element("hr");
			t1 = space();
			div = element("div");
			section0 = element("section");

			if (left_slot) left_slot.c();
			t2 = space();
			section1 = element("section");

			if (right_slot) right_slot.c();
			this.h();
		},

		l: function claim(nodes) {
			section2 = claim_element(nodes, "SECTION", { class: true }, false);
			var section2_nodes = children(section2);

			if (header_slot) header_slot.l(section2_nodes);
			t0 = claim_text(section2_nodes, "\n    ");

			hr = claim_element(section2_nodes, "HR", {}, false);
			var hr_nodes = children(hr);

			hr_nodes.forEach(detach);
			t1 = claim_text(section2_nodes, "\n    ");

			div = claim_element(section2_nodes, "DIV", { class: true }, false);
			var div_nodes = children(div);

			section0 = claim_element(div_nodes, "SECTION", { class: true }, false);
			var section0_nodes = children(section0);

			if (left_slot) left_slot.l(section0_nodes);
			section0_nodes.forEach(detach);
			t2 = claim_text(div_nodes, "\n        ");

			section1 = claim_element(div_nodes, "SECTION", { class: true }, false);
			var section1_nodes = children(section1);

			if (right_slot) right_slot.l(section1_nodes);
			section1_nodes.forEach(detach);
			div_nodes.forEach(detach);
			section2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			add_location(hr, file$4, 40, 4, 629);

			attr(section0, "class", "left-div subcards svelte-1laj3e");
			add_location(section0, file$4, 42, 8, 668);

			attr(section1, "class", "right-div subcards svelte-1laj3e");
			add_location(section1, file$4, 45, 8, 769);
			attr(div, "class", "wrapper svelte-1laj3e");
			add_location(div, file$4, 41, 4, 638);
			attr(section2, "class", "card svelte-1laj3e");
			add_location(section2, file$4, 38, 0, 555);
		},

		m: function mount(target, anchor) {
			insert(target, section2, anchor);

			if (header_slot) {
				header_slot.m(section2, null);
			}

			append(section2, t0);
			append(section2, hr);
			append(section2, t1);
			append(section2, div);
			append(div, section0);

			if (left_slot) {
				left_slot.m(section0, null);
			}

			append(div, t2);
			append(div, section1);

			if (right_slot) {
				right_slot.m(section1, null);
			}

			current = true;
		},

		p: function update(changed, ctx) {
			if (header_slot && header_slot.p && changed.$$scope) {
				header_slot.p(get_slot_changes(header_slot_1, ctx, changed, get_header_slot_changes$1), get_slot_context(header_slot_1, ctx, get_header_slot_context$1));
			}

			if (left_slot && left_slot.p && changed.$$scope) {
				left_slot.p(get_slot_changes(left_slot_1, ctx, changed, get_left_slot_changes), get_slot_context(left_slot_1, ctx, get_left_slot_context));
			}

			if (right_slot && right_slot.p && changed.$$scope) {
				right_slot.p(get_slot_changes(right_slot_1, ctx, changed, get_right_slot_changes), get_slot_context(right_slot_1, ctx, get_right_slot_context));
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(header_slot, local);
			transition_in(left_slot, local);
			transition_in(right_slot, local);
			current = true;
		},

		o: function outro(local) {
			transition_out(header_slot, local);
			transition_out(left_slot, local);
			transition_out(right_slot, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(section2);
			}

			if (header_slot) header_slot.d(detaching);

			if (left_slot) left_slot.d(detaching);

			if (right_slot) right_slot.d(detaching);
		}
	};
}

function instance$4($$self, $$props, $$invalidate) {
	let { section } = $$props;

	const writable_props = ['section'];
	Object.keys($$props).forEach(key => {
		if (!writable_props.includes(key) && !key.startsWith('$$')) console.warn(`<Card> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ('section' in $$props) $$invalidate('section', section = $$props.section);
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return { section, $$slots, $$scope };
}

class Card extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, ["section"]);

		const { ctx } = this.$$;
		const props = options.props || {};
		if (ctx.section === undefined && !('section' in props)) {
			console.warn("<Card> was created without expected prop 'section'");
		}
	}

	get section() {
		throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set section(value) {
		throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const garnetUnfilled = "M 33.740234 2.0605469 C 32.610234 2.0605469 31.490234 2.339375 30.490234 2.859375 C 30.490234 2.859375 29.670234 3.2400781 29.490234 3.3300781 L 20.109375 8.0195312 C 19.629375 8.2595313 19.190547 8.5692188 18.810547 8.9492188 L 8.8300781 18.939453 C 8.5100781 19.249453 8.2395312 19.610234 8.0195312 19.990234 L 3.0292969 28.810547 C 2.3792969 29.900547 2.0292969 31.140156 2.0292969 32.410156 L 2.0976562 45.912109 C 2.0496562 46.744109 2.047375 47.552078 2.109375 48.330078 C 2.139375 48.740078 2.1902344 49.150781 2.2402344 49.550781 C 2.4102344 50.620781 2.6903125 51.609297 3.0703125 52.529297 C 3.1903125 52.809297 3.3209375 53.079609 3.4609375 53.349609 C 3.9309375 54.249609 4.5202344 55.069062 5.2402344 55.789062 C 5.5042344 56.053063 5.7813125 56.30025 6.0703125 56.53125 C 6.2393125 56.66625 6.4206563 56.784203 6.5976562 56.908203 C 6.7236563 56.996203 6.8426562 57.091828 6.9726562 57.173828 C 7.2296562 57.336828 7.5013906 57.480094 7.7753906 57.621094 C 7.8343906 57.651094 7.8892187 57.68975 7.9492188 57.71875 C 8.2692188 57.87575 8.6013594 58.014578 8.9433594 58.142578 C 8.9613594 58.149578 8.9790469 58.159016 8.9980469 58.166016 C 10.448047 58.701016 12.096687 58.976188 13.929688 58.992188 C 13.938688 58.993187 13.944125 58.998047 13.953125 58.998047 C 13.969125 59.000047 13.985 59 14 59 C 14.007 59 14.012531 58.996094 14.019531 58.996094 C 14.047531 58.996094 14.071609 59 14.099609 59 C 14.469609 59 14.840938 58.990938 15.210938 58.960938 C 15.670938 58.940937 16.129609 58.899609 16.599609 58.849609 L 16.619141 58.849609 L 55.5 56.910156 C 56.54 56.860156 57.360391 56.030234 57.400391 54.990234 L 58.890625 16.289062 C 58.900625 16.219062 58.970703 14.320391 58.970703 14.150391 C 58.970703 13.392391 58.907453 12.669797 58.814453 11.966797 C 58.771453 11.600797 58.720391 11.240625 58.650391 10.890625 C 58.640391 10.890625 58.640391 10.879141 58.650391 10.869141 C 58.440391 9.8591406 58.130703 8.9205469 57.720703 8.0605469 C 57.220703 7.0205469 56.569766 6.0795312 55.759766 5.2695312 C 53.629766 3.1395313 50.650391 2.0605469 46.900391 2.0605469 L 33.740234 2.0605469 z M 35.119141 4.0605469 L 43.669922 4.0605469 L 43.369141 4.390625 L 40.060547 7.9335938 C 39.689547 7.3175938 39.195312 6.7676094 38.570312 6.3496094 L 37.910156 5.9101562 L 35.890625 4.5703125 L 35.880859 4.5703125 L 35.119141 4.0605469 z M 46.900391 4.0605469 C 50.100391 4.0605469 52.599609 4.9396875 54.349609 6.6796875 C 54.579609 6.9096875 54.790234 7.1501562 54.990234 7.4101562 C 56.321234 9.1281562 56.978984 11.475016 56.958984 14.291016 L 37.683594 20.658203 L 40.539062 12.089844 C 40.768062 11.403844 40.824906 10.696812 40.753906 10.007812 L 46.160156 11.919922 C 46.270156 11.959922 46.380234 11.980469 46.490234 11.980469 C 46.900234 11.980469 47.289453 11.720547 47.439453 11.310547 C 47.619453 10.790547 47.350078 10.219063 46.830078 10.039062 L 42.320312 8.4394531 L 46.390625 4.0703125 C 46.560625 4.0603125 46.730391 4.0605469 46.900391 4.0605469 z M 31.720703 4.8007812 C 32.310703 4.8007812 32.890625 4.9707812 33.390625 5.3007812 L 33.75 5.5390625 L 35.679688 6.8300781 L 37.460938 8.0097656 C 38.580937 8.7597656 39.070625 10.180938 38.640625 11.460938 L 35.490234 20.900391 C 35.320234 21.400391 35.030625 21.849219 34.640625 22.199219 L 22.390625 33.080078 C 22.010625 33.420078 21.550781 33.659531 21.050781 33.769531 L 11.050781 35.990234 C 9.9207813 36.240234 8.7805469 35.829453 8.0605469 34.939453 L 7.4804688 34.210938 L 6.1503906 32.550781 L 6.140625 32.539062 L 5.6699219 31.949219 C 5.2299219 31.409219 5.0097656 30.750078 5.0097656 30.080078 C 5.0097656 29.750078 5.0596875 29.429375 5.1796875 29.109375 C 5.2296875 28.929375 5.3101562 28.759844 5.4101562 28.589844 L 9.7597656 20.980469 C 9.8897656 20.750469 10.050234 20.539609 10.240234 20.349609 L 20.220703 10.369141 C 20.450703 10.139141 20.72 9.9507813 21 9.8007812 L 30.380859 5.109375 C 30.530859 5.039375 30.679844 4.9796875 30.839844 4.9296875 C 31.129844 4.8396875 31.430703 4.8007813 31.720703 4.8007812 z M 50.310547 11.351562 C 49.921625 11.374859 49.564531 11.624875 49.425781 12.015625 C 49.241781 12.536625 49.514156 13.107969 50.035156 13.292969 L 52.482422 14.160156 C 52.592422 14.199156 52.705406 14.21875 52.816406 14.21875 C 53.228406 14.21875 53.613766 13.961781 53.759766 13.550781 C 53.943766 13.030781 53.670391 12.458438 53.150391 12.273438 L 50.703125 11.40625 C 50.573125 11.36025 50.440188 11.343797 50.310547 11.351562 z M 56.873047 16.423828 C 56.877047 16.450828 56.873906 16.483766 56.878906 16.509766 L 56.869141 16.769531 C 55.885141 24.060531 50.844734 33.314406 42.802734 41.566406 C 42.797734 41.542406 42.799969 41.518141 42.792969 41.494141 L 40.242188 32.804688 C 40.086188 32.274687 39.530953 31.967953 39.001953 32.126953 C 38.471953 32.281953 38.168219 32.837187 38.324219 33.367188 L 40.3125 40.146484 L 24.191406 34.160156 L 35.970703 23.689453 C 36.152703 23.527453 36.317656 23.350062 36.472656 23.164062 L 56.873047 16.423828 z M 56.560547 24.810547 L 55.400391 54.910156 L 25.279297 56.419922 C 31.399297 53.829922 37.839609 49.390859 43.599609 43.630859 C 49.619609 37.610859 54.050547 30.980547 56.560547 24.810547 z M 37.345703 25.099609 C 37.216797 25.084812 37.083172 25.095516 36.951172 25.134766 C 36.421172 25.289766 36.118437 25.845 36.273438 26.375 L 37.017578 28.914062 C 37.145578 29.350062 37.543563 29.632813 37.976562 29.632812 C 38.069563 29.632812 38.163813 29.619797 38.257812 29.591797 C 38.787813 29.436797 39.090547 28.881563 38.935547 28.351562 L 38.191406 25.8125 C 38.074406 25.415 37.732422 25.144 37.345703 25.099609 z M 4.0292969 33.089844 C 4.0492969 33.129844 4.079375 33.159219 4.109375 33.199219 L 5.1796875 34.529297 L 6.4902344 36.179688 C 6.5002344 36.199688 6.5192969 36.220469 6.5292969 36.230469 C 6.9452969 36.736469 7.4442344 37.138453 7.9902344 37.439453 C 7.9872344 37.529453 12.708984 56.933594 12.708984 56.933594 C 11.832984 56.856594 11.021578 56.699656 10.267578 56.472656 C 10.183578 56.447656 10.097625 56.423484 10.015625 56.396484 C 9.839625 56.338484 9.6709531 56.273031 9.5019531 56.207031 C 9.3839531 56.160031 9.2634375 56.1135 9.1484375 56.0625 C 9.0034375 55.9985 8.8636094 55.931328 8.7246094 55.861328 C 8.5906094 55.793328 8.4590781 55.722438 8.3300781 55.648438 C 8.2130781 55.581437 8.097375 55.513406 7.984375 55.441406 C 7.833375 55.344406 7.6879219 55.239766 7.5449219 55.134766 C 7.4599219 55.072766 7.3720625 55.012266 7.2890625 54.947266 C 7.0660625 54.769266 6.8514375 54.581859 6.6484375 54.380859 C 4.5694375 52.289859 3.73 49.210781 4 45.550781 L 7.5292969 40.25 C 7.8392969 39.79 7.7197656 39.169141 7.2597656 38.869141 C 6.7997656 38.559141 6.1791406 38.680625 5.8691406 39.140625 L 4.9492188 40.509766 L 4.9492188 40.529297 L 4.0292969 41.900391 L 4.0292969 33.089844 z M 22.130859 35.527344 L 41.484375 42.714844 C 41.532375 42.732844 41.583813 42.729234 41.632812 42.740234 C 33.416812 50.775234 23.95 56.028141 16.25 56.869141 L 16.089844 56.880859 C 16.004844 56.889859 15.927703 56.894344 15.845703 56.902344 C 15.783703 56.907344 15.719203 56.913969 15.658203 56.917969 C 15.579203 56.925969 15.502828 56.9305 15.423828 56.9375 L 19.464844 45.195312 C 19.644844 44.673313 19.36675 44.105781 18.84375 43.925781 C 18.32175 43.744781 17.751266 44.023875 17.572266 44.546875 L 14.162109 54.457031 L 10.142578 38.046875 C 10.221578 38.050875 10.300859 38.060547 10.380859 38.060547 C 10.750859 38.060547 11.120469 38.019453 11.480469 37.939453 L 21.490234 35.720703 C 21.708234 35.670703 21.921859 35.604344 22.130859 35.527344 z M 45.904297 43.990234 C 45.648547 43.990234 45.392766 44.087703 45.197266 44.283203 L 43.783203 45.697266 C 43.392203 46.087266 43.392203 46.720328 43.783203 47.111328 C 43.978203 47.306328 44.234234 47.404297 44.490234 47.404297 C 44.746234 47.404297 45.002266 47.306328 45.197266 47.111328 L 46.611328 45.697266 C 47.002328 45.306266 47.002328 44.674203 46.611328 44.283203 C 46.415828 44.087703 46.160047 43.990234 45.904297 43.990234 z M 49.439453 47.523438 C 49.183703 47.523437 48.927922 47.620906 48.732422 47.816406 L 47.318359 49.232422 C 46.927359 49.623422 46.927359 50.255484 47.318359 50.646484 C 47.513359 50.842484 47.769391 50.939453 48.025391 50.939453 C 48.281391 50.939453 48.537422 50.841484 48.732422 50.646484 L 50.146484 49.230469 C 50.537484 48.839469 50.537484 48.207406 50.146484 47.816406 C 49.950984 47.620906 49.695203 47.523438 49.439453 47.523438 z M 52.976562 51.060547 C 52.720812 51.060547 52.465031 51.158016 52.269531 51.353516 L 50.853516 52.767578 C 50.462516 53.158578 50.462516 53.790641 50.853516 54.181641 C 51.048516 54.376641 51.304547 54.474609 51.560547 54.474609 C 51.816547 54.474609 52.072578 54.376641 52.267578 54.181641 L 53.683594 52.767578 C 54.074594 52.376578 54.074594 51.744516 53.683594 51.353516 C 53.488094 51.158016 53.232313 51.060547 52.976562 51.060547 z";

/* src/routes/index.svelte generated by Svelte v3.6.2 */

const file$5 = "src/routes/index.svelte";

// (94:2) <h3 slot="header">
function create_header_slot$1(ctx) {
	var h3, t;

	return {
		c: function create() {
			h3 = element("h3");
			t = text("UC San Diego's premier engineering fraternity");
			this.h();
		},

		l: function claim(nodes) {
			h3 = claim_element(nodes, "H3", { slot: true }, false);
			var h3_nodes = children(h3);

			t = claim_text(h3_nodes, "UC San Diego's premier engineering fraternity");
			h3_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(h3, "slot", "header");
			add_location(h3, file$5, 93, 2, 1618);
		},

		m: function mount(target, anchor) {
			insert(target, h3, anchor);
			append(h3, t);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h3);
			}
		}
	};
}

// (95:2) <section slot="left">
function create_left_slot(ctx) {
	var section, p0, t0, t1, p1, t2, t3, p2, t4;

	return {
		c: function create() {
			section = element("section");
			p0 = element("p");
			t0 = text("Formed in 1904 with chapters in over 80 campuses, Theta Tau is both the\n\t\tnation's largest and oldest co-ed engineering fraternity. Our brothers \n\t\tdevelop each other to not only focus on one aspect of ourselves, but on \n\t\tmany. We strive to be well-rounded people who excel in brotherhood,\n\t\tphilanthropy, and professionalism.");
			t1 = space();
			p1 = element("p");
			t2 = text("Brothers help each other with homework, open doors professionally, \n\t\tprovide a support system, improve the world for those in need, and hang \n\t\tout with each other among many more things. In addition, a deep,\n\t\tmultidisciplinary network of alumni are always there to help at any\n\t\ttime. Most importantly, Theta Tau has brought people together to form \n\t\tconnections that will last a lifetime.");
			t3 = space();
			p2 = element("p");
			t4 = text("No matter where your interests lie or what kind of engineer you may be,\n\t\tcome check us out!");
			this.h();
		},

		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { slot: true }, false);
			var section_nodes = children(section);

			p0 = claim_element(section_nodes, "P", { class: true }, false);
			var p0_nodes = children(p0);

			t0 = claim_text(p0_nodes, "Formed in 1904 with chapters in over 80 campuses, Theta Tau is both the\n\t\tnation's largest and oldest co-ed engineering fraternity. Our brothers \n\t\tdevelop each other to not only focus on one aspect of ourselves, but on \n\t\tmany. We strive to be well-rounded people who excel in brotherhood,\n\t\tphilanthropy, and professionalism.");
			p0_nodes.forEach(detach);
			t1 = claim_text(section_nodes, "\n\t");

			p1 = claim_element(section_nodes, "P", { class: true }, false);
			var p1_nodes = children(p1);

			t2 = claim_text(p1_nodes, "Brothers help each other with homework, open doors professionally, \n\t\tprovide a support system, improve the world for those in need, and hang \n\t\tout with each other among many more things. In addition, a deep,\n\t\tmultidisciplinary network of alumni are always there to help at any\n\t\ttime. Most importantly, Theta Tau has brought people together to form \n\t\tconnections that will last a lifetime.");
			p1_nodes.forEach(detach);
			t3 = claim_text(section_nodes, "\n\t");

			p2 = claim_element(section_nodes, "P", { class: true }, false);
			var p2_nodes = children(p2);

			t4 = claim_text(p2_nodes, "No matter where your interests lie or what kind of engineer you may be,\n\t\tcome check us out!");
			p2_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(p0, "class", "svelte-193cvxe");
			add_location(p0, file$5, 95, 3, 1714);
			attr(p1, "class", "svelte-193cvxe");
			add_location(p1, file$5, 102, 1, 2055);
			attr(p2, "class", "svelte-193cvxe");
			add_location(p2, file$5, 110, 1, 2462);
			attr(section, "slot", "left");
			add_location(section, file$5, 94, 2, 1689);
		},

		m: function mount(target, anchor) {
			insert(target, section, anchor);
			append(section, p0);
			append(p0, t0);
			append(section, t1);
			append(section, p1);
			append(p1, t2);
			append(section, t3);
			append(section, p2);
			append(p2, t4);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(section);
			}
		}
	};
}

// (116:2) <figure slot="right">
function create_right_slot(ctx) {
	var figure, iframe, t0, figcaption, t1;

	return {
		c: function create() {
			figure = element("figure");
			iframe = element("iframe");
			t0 = space();
			figcaption = element("figcaption");
			t1 = text("Our rush video for Spring 2019!");
			this.h();
		},

		l: function claim(nodes) {
			figure = claim_element(nodes, "FIGURE", { slot: true }, false);
			var figure_nodes = children(figure);

			iframe = claim_element(figure_nodes, "IFRAME", { title: true, width: true, height: true, src: true, frameborder: true, allow: true, allowfullscreen: true }, false);
			var iframe_nodes = children(iframe);

			iframe_nodes.forEach(detach);
			t0 = claim_text(figure_nodes, "\n\t");

			figcaption = claim_element(figure_nodes, "FIGCAPTION", { class: true }, false);
			var figcaption_nodes = children(figcaption);

			t1 = claim_text(figcaption_nodes, "Our rush video for Spring 2019!");
			figcaption_nodes.forEach(detach);
			figure_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(iframe, "title", "SP19 rush video");
			attr(iframe, "width", "960");
			attr(iframe, "height", "540");
			attr(iframe, "src", "https://www.youtube.com/embed/FLfQ3UrGNKk");
			attr(iframe, "frameborder", "0");
			attr(iframe, "allow", "accelerometer; autoplay; encrypted-media; gyroscope;\n      picture-in-picture");
			iframe.allowFullscreen = true;
			add_location(iframe, file$5, 118, 4, 2655);
			attr(figcaption, "class", "svelte-193cvxe");
			add_location(figcaption, file$5, 127, 1, 2921);
			attr(figure, "slot", "right");
			add_location(figure, file$5, 115, 2, 2582);
		},

		m: function mount(target, anchor) {
			insert(target, figure, anchor);
			append(figure, iframe);
			append(figure, t0);
			append(figure, figcaption);
			append(figcaption, t1);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(figure);
			}
		}
	};
}

// (93:0) <Card>
function create_default_slot$1(ctx) {
	var t0, t1;

	return {
		c: function create() {
			t0 = space();
			t1 = space();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "\n  ");
			t1 = claim_text(nodes, "\n  ");
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(t1);
			}
		}
	};
}

function create_fragment$5(ctx) {
	var t0, div0, t1, t2, t3, div1, h1, t4, t5, t6, br0, t7, br1, t8, br2, t9, br3, t10, br4, t11, br5, t12, br6, t13, br7, t14, br8, t15, br9, t16, br10, t17, br11, t18, br12, t19, br13, t20, br14, t21, br15, t22, br16, t23, br17, t24, br18, t25, br19, t26, br20, t27, br21, t28, br22, t29, br23, t30, br24, t31, br25, t32, br26, t33, br27, t34, br28, t35, br29, t36, br30, t37, br31, t38, br32, t39, br33, t40, br34, t41, br35, t42, br36, t43, br37, t44, br38, t45, br39, t46, br40, t47, br41, t48, br42, t49, br43, t50, br44, t51, br45, t52, br46, t53, br47, t54, br48, t55, br49, t56, br50, t57, br51, t58, br52, t59, br53, t60, br54, t61, br55, t62, br56, t63, br57, t64, br58, t65, br59, t66, br60, t67, br61, t68, br62, t69, p, t70, a, t71, current;

	var hero = new Hero({
		props: {
		titleBig: "UCSD Theta Tau",
		titleSmall: "UCSD ΘΤ",
		tagline: "Epsilon Delta",
		svg: garnetUnfilled,
		alt: "a hero"
	},
		$$inline: true
	});

	var weare = new WeAre({
		props: { brotherLabels: ctx.brotherLabels },
		$$inline: true
	});

	var card = new Card({
		props: {
		$$slots: {
		default: [create_default_slot$1],
		right: [create_right_slot],
		left: [create_left_slot],
		header: [create_header_slot$1]
	},
		$$scope: { ctx }
	},
		$$inline: true
	});

	var pillars = new Pillars({ $$inline: true });

	return {
		c: function create() {
			t0 = space();
			div0 = element("div");
			hero.$$.fragment.c();
			t1 = space();
			weare.$$.fragment.c();
			t2 = space();
			card.$$.fragment.c();
			t3 = space();
			div1 = element("div");
			h1 = element("h1");
			t4 = text("the Three Pillars");
			t5 = space();
			pillars.$$.fragment.c();
			t6 = space();
			br0 = element("br");
			t7 = space();
			br1 = element("br");
			t8 = space();
			br2 = element("br");
			t9 = space();
			br3 = element("br");
			t10 = space();
			br4 = element("br");
			t11 = space();
			br5 = element("br");
			t12 = space();
			br6 = element("br");
			t13 = space();
			br7 = element("br");
			t14 = space();
			br8 = element("br");
			t15 = space();
			br9 = element("br");
			t16 = space();
			br10 = element("br");
			t17 = space();
			br11 = element("br");
			t18 = space();
			br12 = element("br");
			t19 = space();
			br13 = element("br");
			t20 = space();
			br14 = element("br");
			t21 = space();
			br15 = element("br");
			t22 = space();
			br16 = element("br");
			t23 = space();
			br17 = element("br");
			t24 = space();
			br18 = element("br");
			t25 = space();
			br19 = element("br");
			t26 = space();
			br20 = element("br");
			t27 = space();
			br21 = element("br");
			t28 = space();
			br22 = element("br");
			t29 = space();
			br23 = element("br");
			t30 = space();
			br24 = element("br");
			t31 = space();
			br25 = element("br");
			t32 = space();
			br26 = element("br");
			t33 = space();
			br27 = element("br");
			t34 = space();
			br28 = element("br");
			t35 = space();
			br29 = element("br");
			t36 = space();
			br30 = element("br");
			t37 = space();
			br31 = element("br");
			t38 = space();
			br32 = element("br");
			t39 = space();
			br33 = element("br");
			t40 = space();
			br34 = element("br");
			t41 = space();
			br35 = element("br");
			t42 = space();
			br36 = element("br");
			t43 = space();
			br37 = element("br");
			t44 = space();
			br38 = element("br");
			t45 = space();
			br39 = element("br");
			t46 = space();
			br40 = element("br");
			t47 = space();
			br41 = element("br");
			t48 = space();
			br42 = element("br");
			t49 = space();
			br43 = element("br");
			t50 = space();
			br44 = element("br");
			t51 = space();
			br45 = element("br");
			t52 = space();
			br46 = element("br");
			t53 = space();
			br47 = element("br");
			t54 = space();
			br48 = element("br");
			t55 = space();
			br49 = element("br");
			t56 = space();
			br50 = element("br");
			t57 = space();
			br51 = element("br");
			t58 = space();
			br52 = element("br");
			t59 = space();
			br53 = element("br");
			t60 = space();
			br54 = element("br");
			t61 = space();
			br55 = element("br");
			t62 = space();
			br56 = element("br");
			t63 = space();
			br57 = element("br");
			t64 = space();
			br58 = element("br");
			t65 = space();
			br59 = element("br");
			t66 = space();
			br60 = element("br");
			t67 = space();
			br61 = element("br");
			t68 = space();
			br62 = element("br");
			t69 = space();
			p = element("p");
			t70 = text("Icons from\n  ");
			a = element("a");
			t71 = text("icons8");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "\n\n");

			div0 = claim_element(nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			hero.$$.fragment.l(div0_nodes);
			div0_nodes.forEach(detach);
			t1 = claim_text(nodes, "\n");
			weare.$$.fragment.l(nodes);
			t2 = claim_text(nodes, "\n\n");
			card.$$.fragment.l(nodes);
			t3 = claim_text(nodes, "\n\n");

			div1 = claim_element(nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			h1 = claim_element(div1_nodes, "H1", { class: true }, false);
			var h1_nodes = children(h1);

			t4 = claim_text(h1_nodes, "the Three Pillars");
			h1_nodes.forEach(detach);
			t5 = claim_text(div1_nodes, "\n  ");
			pillars.$$.fragment.l(div1_nodes);
			div1_nodes.forEach(detach);
			t6 = claim_text(nodes, "\n\n\n\n\n\n");

			br0 = claim_element(nodes, "BR", {}, false);
			var br0_nodes = children(br0);

			br0_nodes.forEach(detach);
			t7 = claim_text(nodes, "\n");

			br1 = claim_element(nodes, "BR", {}, false);
			var br1_nodes = children(br1);

			br1_nodes.forEach(detach);
			t8 = claim_text(nodes, "\n");

			br2 = claim_element(nodes, "BR", {}, false);
			var br2_nodes = children(br2);

			br2_nodes.forEach(detach);
			t9 = claim_text(nodes, "\n");

			br3 = claim_element(nodes, "BR", {}, false);
			var br3_nodes = children(br3);

			br3_nodes.forEach(detach);
			t10 = claim_text(nodes, "\n");

			br4 = claim_element(nodes, "BR", {}, false);
			var br4_nodes = children(br4);

			br4_nodes.forEach(detach);
			t11 = claim_text(nodes, "\n");

			br5 = claim_element(nodes, "BR", {}, false);
			var br5_nodes = children(br5);

			br5_nodes.forEach(detach);
			t12 = claim_text(nodes, "\n");

			br6 = claim_element(nodes, "BR", {}, false);
			var br6_nodes = children(br6);

			br6_nodes.forEach(detach);
			t13 = claim_text(nodes, "\n");

			br7 = claim_element(nodes, "BR", {}, false);
			var br7_nodes = children(br7);

			br7_nodes.forEach(detach);
			t14 = claim_text(nodes, "\n");

			br8 = claim_element(nodes, "BR", {}, false);
			var br8_nodes = children(br8);

			br8_nodes.forEach(detach);
			t15 = claim_text(nodes, "\n");

			br9 = claim_element(nodes, "BR", {}, false);
			var br9_nodes = children(br9);

			br9_nodes.forEach(detach);
			t16 = claim_text(nodes, "\n");

			br10 = claim_element(nodes, "BR", {}, false);
			var br10_nodes = children(br10);

			br10_nodes.forEach(detach);
			t17 = claim_text(nodes, "\n");

			br11 = claim_element(nodes, "BR", {}, false);
			var br11_nodes = children(br11);

			br11_nodes.forEach(detach);
			t18 = claim_text(nodes, "\n");

			br12 = claim_element(nodes, "BR", {}, false);
			var br12_nodes = children(br12);

			br12_nodes.forEach(detach);
			t19 = claim_text(nodes, "\n");

			br13 = claim_element(nodes, "BR", {}, false);
			var br13_nodes = children(br13);

			br13_nodes.forEach(detach);
			t20 = claim_text(nodes, "\n");

			br14 = claim_element(nodes, "BR", {}, false);
			var br14_nodes = children(br14);

			br14_nodes.forEach(detach);
			t21 = claim_text(nodes, "\n");

			br15 = claim_element(nodes, "BR", {}, false);
			var br15_nodes = children(br15);

			br15_nodes.forEach(detach);
			t22 = claim_text(nodes, "\n");

			br16 = claim_element(nodes, "BR", {}, false);
			var br16_nodes = children(br16);

			br16_nodes.forEach(detach);
			t23 = claim_text(nodes, "\n");

			br17 = claim_element(nodes, "BR", {}, false);
			var br17_nodes = children(br17);

			br17_nodes.forEach(detach);
			t24 = claim_text(nodes, "\n");

			br18 = claim_element(nodes, "BR", {}, false);
			var br18_nodes = children(br18);

			br18_nodes.forEach(detach);
			t25 = claim_text(nodes, "\n");

			br19 = claim_element(nodes, "BR", {}, false);
			var br19_nodes = children(br19);

			br19_nodes.forEach(detach);
			t26 = claim_text(nodes, "\n");

			br20 = claim_element(nodes, "BR", {}, false);
			var br20_nodes = children(br20);

			br20_nodes.forEach(detach);
			t27 = claim_text(nodes, "\n");

			br21 = claim_element(nodes, "BR", {}, false);
			var br21_nodes = children(br21);

			br21_nodes.forEach(detach);
			t28 = claim_text(nodes, "\n");

			br22 = claim_element(nodes, "BR", {}, false);
			var br22_nodes = children(br22);

			br22_nodes.forEach(detach);
			t29 = claim_text(nodes, "\n");

			br23 = claim_element(nodes, "BR", {}, false);
			var br23_nodes = children(br23);

			br23_nodes.forEach(detach);
			t30 = claim_text(nodes, "\n");

			br24 = claim_element(nodes, "BR", {}, false);
			var br24_nodes = children(br24);

			br24_nodes.forEach(detach);
			t31 = claim_text(nodes, "\n");

			br25 = claim_element(nodes, "BR", {}, false);
			var br25_nodes = children(br25);

			br25_nodes.forEach(detach);
			t32 = claim_text(nodes, "\n");

			br26 = claim_element(nodes, "BR", {}, false);
			var br26_nodes = children(br26);

			br26_nodes.forEach(detach);
			t33 = claim_text(nodes, "\n");

			br27 = claim_element(nodes, "BR", {}, false);
			var br27_nodes = children(br27);

			br27_nodes.forEach(detach);
			t34 = claim_text(nodes, "\n");

			br28 = claim_element(nodes, "BR", {}, false);
			var br28_nodes = children(br28);

			br28_nodes.forEach(detach);
			t35 = claim_text(nodes, "\n");

			br29 = claim_element(nodes, "BR", {}, false);
			var br29_nodes = children(br29);

			br29_nodes.forEach(detach);
			t36 = claim_text(nodes, "\n");

			br30 = claim_element(nodes, "BR", {}, false);
			var br30_nodes = children(br30);

			br30_nodes.forEach(detach);
			t37 = claim_text(nodes, "\n");

			br31 = claim_element(nodes, "BR", {}, false);
			var br31_nodes = children(br31);

			br31_nodes.forEach(detach);
			t38 = claim_text(nodes, "\n");

			br32 = claim_element(nodes, "BR", {}, false);
			var br32_nodes = children(br32);

			br32_nodes.forEach(detach);
			t39 = claim_text(nodes, "\n");

			br33 = claim_element(nodes, "BR", {}, false);
			var br33_nodes = children(br33);

			br33_nodes.forEach(detach);
			t40 = claim_text(nodes, "\n");

			br34 = claim_element(nodes, "BR", {}, false);
			var br34_nodes = children(br34);

			br34_nodes.forEach(detach);
			t41 = claim_text(nodes, "\n");

			br35 = claim_element(nodes, "BR", {}, false);
			var br35_nodes = children(br35);

			br35_nodes.forEach(detach);
			t42 = claim_text(nodes, "\n");

			br36 = claim_element(nodes, "BR", {}, false);
			var br36_nodes = children(br36);

			br36_nodes.forEach(detach);
			t43 = claim_text(nodes, "\n");

			br37 = claim_element(nodes, "BR", {}, false);
			var br37_nodes = children(br37);

			br37_nodes.forEach(detach);
			t44 = claim_text(nodes, "\n");

			br38 = claim_element(nodes, "BR", {}, false);
			var br38_nodes = children(br38);

			br38_nodes.forEach(detach);
			t45 = claim_text(nodes, "\n");

			br39 = claim_element(nodes, "BR", {}, false);
			var br39_nodes = children(br39);

			br39_nodes.forEach(detach);
			t46 = claim_text(nodes, "\n");

			br40 = claim_element(nodes, "BR", {}, false);
			var br40_nodes = children(br40);

			br40_nodes.forEach(detach);
			t47 = claim_text(nodes, "\n");

			br41 = claim_element(nodes, "BR", {}, false);
			var br41_nodes = children(br41);

			br41_nodes.forEach(detach);
			t48 = claim_text(nodes, "\n");

			br42 = claim_element(nodes, "BR", {}, false);
			var br42_nodes = children(br42);

			br42_nodes.forEach(detach);
			t49 = claim_text(nodes, "\n");

			br43 = claim_element(nodes, "BR", {}, false);
			var br43_nodes = children(br43);

			br43_nodes.forEach(detach);
			t50 = claim_text(nodes, "\n");

			br44 = claim_element(nodes, "BR", {}, false);
			var br44_nodes = children(br44);

			br44_nodes.forEach(detach);
			t51 = claim_text(nodes, "\n");

			br45 = claim_element(nodes, "BR", {}, false);
			var br45_nodes = children(br45);

			br45_nodes.forEach(detach);
			t52 = claim_text(nodes, "\n");

			br46 = claim_element(nodes, "BR", {}, false);
			var br46_nodes = children(br46);

			br46_nodes.forEach(detach);
			t53 = claim_text(nodes, "\n");

			br47 = claim_element(nodes, "BR", {}, false);
			var br47_nodes = children(br47);

			br47_nodes.forEach(detach);
			t54 = claim_text(nodes, "\n");

			br48 = claim_element(nodes, "BR", {}, false);
			var br48_nodes = children(br48);

			br48_nodes.forEach(detach);
			t55 = claim_text(nodes, "\n");

			br49 = claim_element(nodes, "BR", {}, false);
			var br49_nodes = children(br49);

			br49_nodes.forEach(detach);
			t56 = claim_text(nodes, "\n");

			br50 = claim_element(nodes, "BR", {}, false);
			var br50_nodes = children(br50);

			br50_nodes.forEach(detach);
			t57 = claim_text(nodes, "\n");

			br51 = claim_element(nodes, "BR", {}, false);
			var br51_nodes = children(br51);

			br51_nodes.forEach(detach);
			t58 = claim_text(nodes, "\n");

			br52 = claim_element(nodes, "BR", {}, false);
			var br52_nodes = children(br52);

			br52_nodes.forEach(detach);
			t59 = claim_text(nodes, "\n");

			br53 = claim_element(nodes, "BR", {}, false);
			var br53_nodes = children(br53);

			br53_nodes.forEach(detach);
			t60 = claim_text(nodes, "\n");

			br54 = claim_element(nodes, "BR", {}, false);
			var br54_nodes = children(br54);

			br54_nodes.forEach(detach);
			t61 = claim_text(nodes, "\n");

			br55 = claim_element(nodes, "BR", {}, false);
			var br55_nodes = children(br55);

			br55_nodes.forEach(detach);
			t62 = claim_text(nodes, "\n");

			br56 = claim_element(nodes, "BR", {}, false);
			var br56_nodes = children(br56);

			br56_nodes.forEach(detach);
			t63 = claim_text(nodes, "\n");

			br57 = claim_element(nodes, "BR", {}, false);
			var br57_nodes = children(br57);

			br57_nodes.forEach(detach);
			t64 = claim_text(nodes, "\n");

			br58 = claim_element(nodes, "BR", {}, false);
			var br58_nodes = children(br58);

			br58_nodes.forEach(detach);
			t65 = claim_text(nodes, "\n");

			br59 = claim_element(nodes, "BR", {}, false);
			var br59_nodes = children(br59);

			br59_nodes.forEach(detach);
			t66 = claim_text(nodes, "\n");

			br60 = claim_element(nodes, "BR", {}, false);
			var br60_nodes = children(br60);

			br60_nodes.forEach(detach);
			t67 = claim_text(nodes, "\n");

			br61 = claim_element(nodes, "BR", {}, false);
			var br61_nodes = children(br61);

			br61_nodes.forEach(detach);
			t68 = claim_text(nodes, "\n");

			br62 = claim_element(nodes, "BR", {}, false);
			var br62_nodes = children(br62);

			br62_nodes.forEach(detach);
			t69 = claim_text(nodes, "\n");

			p = claim_element(nodes, "P", { class: true }, false);
			var p_nodes = children(p);

			t70 = claim_text(p_nodes, "Icons from\n  ");

			a = claim_element(p_nodes, "A", { href: true }, false);
			var a_nodes = children(a);

			t71 = claim_text(a_nodes, "icons8");
			a_nodes.forEach(detach);
			p_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			document.title = "UCSD Theta Tau";
			attr(div0, "class", "hero-div svelte-193cvxe");
			add_location(div0, file$5, 82, 0, 1416);
			attr(h1, "class", "svelte-193cvxe");
			add_location(h1, file$5, 132, 2, 3027);
			attr(div1, "class", "pillars-div svelte-193cvxe");
			add_location(div1, file$5, 131, 0, 2999);
			add_location(br0, file$5, 140, 0, 3242);
			add_location(br1, file$5, 141, 0, 3249);
			add_location(br2, file$5, 142, 0, 3256);
			add_location(br3, file$5, 143, 0, 3263);
			add_location(br4, file$5, 144, 0, 3270);
			add_location(br5, file$5, 145, 0, 3277);
			add_location(br6, file$5, 146, 0, 3284);
			add_location(br7, file$5, 147, 0, 3291);
			add_location(br8, file$5, 148, 0, 3298);
			add_location(br9, file$5, 149, 0, 3305);
			add_location(br10, file$5, 150, 0, 3312);
			add_location(br11, file$5, 151, 0, 3319);
			add_location(br12, file$5, 152, 0, 3326);
			add_location(br13, file$5, 153, 0, 3333);
			add_location(br14, file$5, 154, 0, 3340);
			add_location(br15, file$5, 155, 0, 3347);
			add_location(br16, file$5, 156, 0, 3354);
			add_location(br17, file$5, 157, 0, 3361);
			add_location(br18, file$5, 158, 0, 3368);
			add_location(br19, file$5, 159, 0, 3375);
			add_location(br20, file$5, 160, 0, 3382);
			add_location(br21, file$5, 161, 0, 3389);
			add_location(br22, file$5, 162, 0, 3396);
			add_location(br23, file$5, 163, 0, 3403);
			add_location(br24, file$5, 164, 0, 3410);
			add_location(br25, file$5, 165, 0, 3417);
			add_location(br26, file$5, 166, 0, 3424);
			add_location(br27, file$5, 167, 0, 3431);
			add_location(br28, file$5, 168, 0, 3438);
			add_location(br29, file$5, 169, 0, 3445);
			add_location(br30, file$5, 170, 0, 3452);
			add_location(br31, file$5, 171, 0, 3459);
			add_location(br32, file$5, 172, 0, 3466);
			add_location(br33, file$5, 173, 0, 3473);
			add_location(br34, file$5, 174, 0, 3480);
			add_location(br35, file$5, 175, 0, 3487);
			add_location(br36, file$5, 176, 0, 3494);
			add_location(br37, file$5, 177, 0, 3501);
			add_location(br38, file$5, 178, 0, 3508);
			add_location(br39, file$5, 179, 0, 3515);
			add_location(br40, file$5, 180, 0, 3522);
			add_location(br41, file$5, 181, 0, 3529);
			add_location(br42, file$5, 182, 0, 3536);
			add_location(br43, file$5, 183, 0, 3543);
			add_location(br44, file$5, 184, 0, 3550);
			add_location(br45, file$5, 185, 0, 3557);
			add_location(br46, file$5, 186, 0, 3564);
			add_location(br47, file$5, 187, 0, 3571);
			add_location(br48, file$5, 188, 0, 3578);
			add_location(br49, file$5, 189, 0, 3585);
			add_location(br50, file$5, 190, 0, 3592);
			add_location(br51, file$5, 191, 0, 3599);
			add_location(br52, file$5, 192, 0, 3606);
			add_location(br53, file$5, 193, 0, 3613);
			add_location(br54, file$5, 194, 0, 3620);
			add_location(br55, file$5, 195, 0, 3627);
			add_location(br56, file$5, 196, 0, 3634);
			add_location(br57, file$5, 197, 0, 3641);
			add_location(br58, file$5, 198, 0, 3648);
			add_location(br59, file$5, 199, 0, 3655);
			add_location(br60, file$5, 200, 0, 3662);
			add_location(br61, file$5, 201, 0, 3669);
			add_location(br62, file$5, 202, 0, 3676);
			attr(a, "href", "https://icons8.com/icons");
			add_location(a, file$5, 205, 2, 3702);
			attr(p, "class", "svelte-193cvxe");
			add_location(p, file$5, 203, 0, 3683);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, div0, anchor);
			mount_component(hero, div0, null);
			insert(target, t1, anchor);
			mount_component(weare, target, anchor);
			insert(target, t2, anchor);
			mount_component(card, target, anchor);
			insert(target, t3, anchor);
			insert(target, div1, anchor);
			append(div1, h1);
			append(h1, t4);
			append(div1, t5);
			mount_component(pillars, div1, null);
			insert(target, t6, anchor);
			insert(target, br0, anchor);
			insert(target, t7, anchor);
			insert(target, br1, anchor);
			insert(target, t8, anchor);
			insert(target, br2, anchor);
			insert(target, t9, anchor);
			insert(target, br3, anchor);
			insert(target, t10, anchor);
			insert(target, br4, anchor);
			insert(target, t11, anchor);
			insert(target, br5, anchor);
			insert(target, t12, anchor);
			insert(target, br6, anchor);
			insert(target, t13, anchor);
			insert(target, br7, anchor);
			insert(target, t14, anchor);
			insert(target, br8, anchor);
			insert(target, t15, anchor);
			insert(target, br9, anchor);
			insert(target, t16, anchor);
			insert(target, br10, anchor);
			insert(target, t17, anchor);
			insert(target, br11, anchor);
			insert(target, t18, anchor);
			insert(target, br12, anchor);
			insert(target, t19, anchor);
			insert(target, br13, anchor);
			insert(target, t20, anchor);
			insert(target, br14, anchor);
			insert(target, t21, anchor);
			insert(target, br15, anchor);
			insert(target, t22, anchor);
			insert(target, br16, anchor);
			insert(target, t23, anchor);
			insert(target, br17, anchor);
			insert(target, t24, anchor);
			insert(target, br18, anchor);
			insert(target, t25, anchor);
			insert(target, br19, anchor);
			insert(target, t26, anchor);
			insert(target, br20, anchor);
			insert(target, t27, anchor);
			insert(target, br21, anchor);
			insert(target, t28, anchor);
			insert(target, br22, anchor);
			insert(target, t29, anchor);
			insert(target, br23, anchor);
			insert(target, t30, anchor);
			insert(target, br24, anchor);
			insert(target, t31, anchor);
			insert(target, br25, anchor);
			insert(target, t32, anchor);
			insert(target, br26, anchor);
			insert(target, t33, anchor);
			insert(target, br27, anchor);
			insert(target, t34, anchor);
			insert(target, br28, anchor);
			insert(target, t35, anchor);
			insert(target, br29, anchor);
			insert(target, t36, anchor);
			insert(target, br30, anchor);
			insert(target, t37, anchor);
			insert(target, br31, anchor);
			insert(target, t38, anchor);
			insert(target, br32, anchor);
			insert(target, t39, anchor);
			insert(target, br33, anchor);
			insert(target, t40, anchor);
			insert(target, br34, anchor);
			insert(target, t41, anchor);
			insert(target, br35, anchor);
			insert(target, t42, anchor);
			insert(target, br36, anchor);
			insert(target, t43, anchor);
			insert(target, br37, anchor);
			insert(target, t44, anchor);
			insert(target, br38, anchor);
			insert(target, t45, anchor);
			insert(target, br39, anchor);
			insert(target, t46, anchor);
			insert(target, br40, anchor);
			insert(target, t47, anchor);
			insert(target, br41, anchor);
			insert(target, t48, anchor);
			insert(target, br42, anchor);
			insert(target, t49, anchor);
			insert(target, br43, anchor);
			insert(target, t50, anchor);
			insert(target, br44, anchor);
			insert(target, t51, anchor);
			insert(target, br45, anchor);
			insert(target, t52, anchor);
			insert(target, br46, anchor);
			insert(target, t53, anchor);
			insert(target, br47, anchor);
			insert(target, t54, anchor);
			insert(target, br48, anchor);
			insert(target, t55, anchor);
			insert(target, br49, anchor);
			insert(target, t56, anchor);
			insert(target, br50, anchor);
			insert(target, t57, anchor);
			insert(target, br51, anchor);
			insert(target, t58, anchor);
			insert(target, br52, anchor);
			insert(target, t59, anchor);
			insert(target, br53, anchor);
			insert(target, t60, anchor);
			insert(target, br54, anchor);
			insert(target, t61, anchor);
			insert(target, br55, anchor);
			insert(target, t62, anchor);
			insert(target, br56, anchor);
			insert(target, t63, anchor);
			insert(target, br57, anchor);
			insert(target, t64, anchor);
			insert(target, br58, anchor);
			insert(target, t65, anchor);
			insert(target, br59, anchor);
			insert(target, t66, anchor);
			insert(target, br60, anchor);
			insert(target, t67, anchor);
			insert(target, br61, anchor);
			insert(target, t68, anchor);
			insert(target, br62, anchor);
			insert(target, t69, anchor);
			insert(target, p, anchor);
			append(p, t70);
			append(p, a);
			append(a, t71);
			current = true;
		},

		p: function update(changed, ctx) {
			var hero_changes = {};
			if (changed.garnetUnfilled) hero_changes.svg = garnetUnfilled;
			hero.$set(hero_changes);

			var weare_changes = {};
			if (changed.brotherLabels) weare_changes.brotherLabels = ctx.brotherLabels;
			weare.$set(weare_changes);

			var card_changes = {};
			if (changed.$$scope) card_changes.$$scope = { changed, ctx };
			card.$set(card_changes);
		},

		i: function intro(local) {
			if (current) return;
			transition_in(hero.$$.fragment, local);

			transition_in(weare.$$.fragment, local);

			transition_in(card.$$.fragment, local);

			transition_in(pillars.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(hero.$$.fragment, local);
			transition_out(weare.$$.fragment, local);
			transition_out(card.$$.fragment, local);
			transition_out(pillars.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(div0);
			}

			destroy_component(hero, );

			if (detaching) {
				detach(t1);
			}

			destroy_component(weare, detaching);

			if (detaching) {
				detach(t2);
			}

			destroy_component(card, detaching);

			if (detaching) {
				detach(t3);
				detach(div1);
			}

			destroy_component(pillars, );

			if (detaching) {
				detach(t6);
				detach(br0);
				detach(t7);
				detach(br1);
				detach(t8);
				detach(br2);
				detach(t9);
				detach(br3);
				detach(t10);
				detach(br4);
				detach(t11);
				detach(br5);
				detach(t12);
				detach(br6);
				detach(t13);
				detach(br7);
				detach(t14);
				detach(br8);
				detach(t15);
				detach(br9);
				detach(t16);
				detach(br10);
				detach(t17);
				detach(br11);
				detach(t18);
				detach(br12);
				detach(t19);
				detach(br13);
				detach(t20);
				detach(br14);
				detach(t21);
				detach(br15);
				detach(t22);
				detach(br16);
				detach(t23);
				detach(br17);
				detach(t24);
				detach(br18);
				detach(t25);
				detach(br19);
				detach(t26);
				detach(br20);
				detach(t27);
				detach(br21);
				detach(t28);
				detach(br22);
				detach(t29);
				detach(br23);
				detach(t30);
				detach(br24);
				detach(t31);
				detach(br25);
				detach(t32);
				detach(br26);
				detach(t33);
				detach(br27);
				detach(t34);
				detach(br28);
				detach(t35);
				detach(br29);
				detach(t36);
				detach(br30);
				detach(t37);
				detach(br31);
				detach(t38);
				detach(br32);
				detach(t39);
				detach(br33);
				detach(t40);
				detach(br34);
				detach(t41);
				detach(br35);
				detach(t42);
				detach(br36);
				detach(t43);
				detach(br37);
				detach(t44);
				detach(br38);
				detach(t45);
				detach(br39);
				detach(t46);
				detach(br40);
				detach(t47);
				detach(br41);
				detach(t48);
				detach(br42);
				detach(t49);
				detach(br43);
				detach(t50);
				detach(br44);
				detach(t51);
				detach(br45);
				detach(t52);
				detach(br46);
				detach(t53);
				detach(br47);
				detach(t54);
				detach(br48);
				detach(t55);
				detach(br49);
				detach(t56);
				detach(br50);
				detach(t57);
				detach(br51);
				detach(t58);
				detach(br52);
				detach(t59);
				detach(br53);
				detach(t60);
				detach(br54);
				detach(t61);
				detach(br55);
				detach(t62);
				detach(br56);
				detach(t63);
				detach(br57);
				detach(t64);
				detach(br58);
				detach(t65);
				detach(br59);
				detach(t66);
				detach(br60);
				detach(t67);
				detach(br61);
				detach(t68);
				detach(br62);
				detach(t69);
				detach(p);
			}
		}
	};
}

function instance$5($$self) {
	

  const brotherLabels = [
    "brothers",
    "entrepreneurs",
    "leaders",
    "pioneers",
    "philanthropists",
    "friends",
    "family",
    "diverse",
    "adventurers",
    "pro gamers",
    "youtube stars",
    "CEOs",
    "project managers",
    "artists",
    "inclusive"
  ];

	return { brotherLabels };
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, []);
	}
}

export default Index;
