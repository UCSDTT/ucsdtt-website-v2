import { S as SvelteComponentDev, i as init, s as safe_not_equal, l as create_slot, e as element, a as space, t as text, c as claim_element, b as children, f as detach, d as claim_text, g as attr, h as add_location, D as listen, j as insert, k as append, o as get_slot_changes, p as get_slot_context, q as transition_in, r as transition_out, E as run_all, F as createEventDispatcher, m as mount_component, u as destroy_component, x as empty, B as group_outros, C as check_outros, n as noop } from './chunk.24d900bd.js';

function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}

function fade(node, { delay = 0, duration = 400 }) {
    const o = +getComputedStyle(node).opacity;
    return {
        delay,
        duration,
        css: t => `opacity: ${t * o}`
    };
}
function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 }) {
    const style = getComputedStyle(node);
    const target_opacity = +style.opacity;
    const transform = style.transform === 'none' ? '' : style.transform;
    const od = target_opacity * (1 - opacity);
    return {
        delay,
        duration,
        easing,
        css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
    };
}

/* src/components/Modal.svelte generated by Svelte v3.6.2 */

const file = "src/components/Modal.svelte";

const get_header_slot_changes = () => ({});
const get_header_slot_context = () => ({});

function create_fragment(ctx) {
	var div0, t0, div1, section, t1, button, t2, t3, hr0, t4, t5, hr1, current, dispose;

	const header_slot_1 = ctx.$$slots.header;
	const header_slot = create_slot(header_slot_1, ctx, get_header_slot_context);

	const default_slot_1 = ctx.$$slots.default;
	const default_slot = create_slot(default_slot_1, ctx, null);

	return {
		c: function create() {
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			section = element("section");

			if (header_slot) header_slot.c();
			t1 = space();
			button = element("button");
			t2 = text("X");
			t3 = space();
			hr0 = element("hr");
			t4 = space();

			if (default_slot) default_slot.c();
			t5 = space();
			hr1 = element("hr");
			this.h();
		},

		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true }, false);
			var div0_nodes = children(div0);

			div0_nodes.forEach(detach);
			t0 = claim_text(nodes, "\n\n");

			div1 = claim_element(nodes, "DIV", { class: true }, false);
			var div1_nodes = children(div1);

			section = claim_element(div1_nodes, "SECTION", { class: true }, false);
			var section_nodes = children(section);

			if (header_slot) header_slot.l(section_nodes);
			t1 = claim_text(section_nodes, "\n        ");

			button = claim_element(section_nodes, "BUTTON", { class: true }, false);
			var button_nodes = children(button);

			t2 = claim_text(button_nodes, "X");
			button_nodes.forEach(detach);
			section_nodes.forEach(detach);
			t3 = claim_text(div1_nodes, "\n\t");

			hr0 = claim_element(div1_nodes, "HR", {}, false);
			var hr0_nodes = children(hr0);

			hr0_nodes.forEach(detach);
			t4 = claim_text(div1_nodes, "\n\t");

			if (default_slot) default_slot.l(div1_nodes);
			t5 = claim_text(div1_nodes, "\n\t");

			hr1 = claim_element(div1_nodes, "HR", {}, false);
			var hr1_nodes = children(hr1);

			hr1_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(div0, "class", "modal-background svelte-wuam0n");
			add_location(div0, file, 64, 0, 1133);

			attr(button, "class", "svelte-wuam0n");
			add_location(button, file, 69, 8, 1299);
			attr(section, "class", "header svelte-wuam0n");
			add_location(section, file, 67, 4, 1232);
			add_location(hr0, file, 71, 1, 1371);

			add_location(hr1, file, 73, 1, 1392);
			attr(div1, "class", "modal svelte-wuam0n");
			add_location(div1, file, 66, 0, 1208);

			dispose = [
				listen(div0, "click", ctx.click_handler),
				listen(button, "click", ctx.click_handler_1)
			];
		},

		m: function mount(target, anchor) {
			insert(target, div0, anchor);
			insert(target, t0, anchor);
			insert(target, div1, anchor);
			append(div1, section);

			if (header_slot) {
				header_slot.m(section, null);
			}

			append(section, t1);
			append(section, button);
			append(button, t2);
			append(div1, t3);
			append(div1, hr0);
			append(div1, t4);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append(div1, t5);
			append(div1, hr1);
			current = true;
		},

		p: function update(changed, ctx) {
			if (header_slot && header_slot.p && changed.$$scope) {
				header_slot.p(get_slot_changes(header_slot_1, ctx, changed, get_header_slot_changes), get_slot_context(header_slot_1, ctx, get_header_slot_context));
			}

			if (default_slot && default_slot.p && changed.$$scope) {
				default_slot.p(get_slot_changes(default_slot_1, ctx, changed, null), get_slot_context(default_slot_1, ctx, null));
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(header_slot, local);
			transition_in(default_slot, local);
			current = true;
		},

		o: function outro(local) {
			transition_out(header_slot, local);
			transition_out(default_slot, local);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(div0);
				detach(t0);
				detach(div1);
			}

			if (header_slot) header_slot.d(detaching);

			if (default_slot) default_slot.d(detaching);
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();

	let { $$slots = {}, $$scope } = $$props;

	function click_handler() {
		return dispatch("close");
	}

	function click_handler_1() {
		return dispatch("close");
	}

	$$self.$set = $$props => {
		if ('$$scope' in $$props) $$invalidate('$$scope', $$scope = $$props.$$scope);
	};

	return {
		dispatch,
		click_handler,
		click_handler_1,
		$$slots,
		$$scope
	};
}

class Modal extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, []);
	}
}

/* src/components/Pillars.svelte generated by Svelte v3.6.2 */

const file$1 = "src/components/Pillars.svelte";

// (76:0) {#if broVis}
function create_if_block_2(ctx) {
	var current;

	var modal = new Modal({
		props: {
		$$slots: {
		default: [create_default_slot_2],
		header: [create_header_slot_2]
	},
		$$scope: { ctx }
	},
		$$inline: true
	});
	modal.$on("close", ctx.close_handler);

	return {
		c: function create() {
			modal.$$.fragment.c();
		},

		l: function claim(nodes) {
			modal.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(modal, target, anchor);
			current = true;
		},

		i: function intro(local) {
			if (current) return;
			transition_in(modal.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(modal.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(modal, detaching);
		}
	};
}

// (78:8) <h2 class="modal-li" slot="header">
function create_header_slot_2(ctx) {
	var h2, t;

	return {
		c: function create() {
			h2 = element("h2");
			t = text("Brotherhood");
			this.h();
		},

		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true, slot: true }, false);
			var h2_nodes = children(h2);

			t = claim_text(h2_nodes, "Brotherhood");
			h2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(h2, "class", "modal-li svelte-6aq29p");
			attr(h2, "slot", "header");
			add_location(h2, file$1, 77, 8, 1680);
		},

		m: function mount(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h2);
			}
		}
	};
}

// (77:4) <Modal on:close="{() => broVis = false}">
function create_default_slot_2(ctx) {
	var t0, ul, li0, t1, t2, li1, t3, t4, li2, t5, t6, li3, t7, t8, li4, t9, t10, img;

	return {
		c: function create() {
			t0 = space();
			ul = element("ul");
			li0 = element("li");
			t1 = text("Lorem ipsum");
			t2 = space();
			li1 = element("li");
			t3 = text("Lorem ipsum");
			t4 = space();
			li2 = element("li");
			t5 = text("Lorem ipsum");
			t6 = space();
			li3 = element("li");
			t7 = text("Lorem ipsum");
			t8 = space();
			li4 = element("li");
			t9 = text("Lorem ipsum");
			t10 = space();
			img = element("img");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "\n        ");

			ul = claim_element(nodes, "UL", {}, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li0_nodes = children(li0);

			t1 = claim_text(li0_nodes, "Lorem ipsum");
			li0_nodes.forEach(detach);
			t2 = claim_text(ul_nodes, "\n            ");

			li1 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li1_nodes = children(li1);

			t3 = claim_text(li1_nodes, "Lorem ipsum");
			li1_nodes.forEach(detach);
			t4 = claim_text(ul_nodes, "\n            ");

			li2 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li2_nodes = children(li2);

			t5 = claim_text(li2_nodes, "Lorem ipsum");
			li2_nodes.forEach(detach);
			t6 = claim_text(ul_nodes, "\n            ");

			li3 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li3_nodes = children(li3);

			t7 = claim_text(li3_nodes, "Lorem ipsum");
			li3_nodes.forEach(detach);
			t8 = claim_text(ul_nodes, "\n            ");

			li4 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li4_nodes = children(li4);

			t9 = claim_text(li4_nodes, "Lorem ipsum");
			li4_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			t10 = claim_text(nodes, "\n        ");

			img = claim_element(nodes, "IMG", { src: true, alt: true, width: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(li0, "class", "modal-li svelte-6aq29p");
			add_location(li0, file$1, 79, 12, 1757);
			attr(li1, "class", "modal-li svelte-6aq29p");
			add_location(li1, file$1, 80, 12, 1807);
			attr(li2, "class", "modal-li svelte-6aq29p");
			add_location(li2, file$1, 81, 12, 1857);
			attr(li3, "class", "modal-li svelte-6aq29p");
			add_location(li3, file$1, 82, 12, 1907);
			attr(li4, "class", "modal-li svelte-6aq29p");
			add_location(li4, file$1, 83, 12, 1957);
			add_location(ul, file$1, 78, 8, 1740);
			attr(img, "src", "images/sigma_fun.jpg");
			attr(img, "alt", "sigmas having fun");
			attr(img, "width", "100%");
			add_location(img, file$1, 85, 8, 2017);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, ul, anchor);
			append(ul, li0);
			append(li0, t1);
			append(ul, t2);
			append(ul, li1);
			append(li1, t3);
			append(ul, t4);
			append(ul, li2);
			append(li2, t5);
			append(ul, t6);
			append(ul, li3);
			append(li3, t7);
			append(ul, t8);
			append(ul, li4);
			append(li4, t9);
			insert(target, t10, anchor);
			insert(target, img, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(ul);
				detach(t10);
				detach(img);
			}
		}
	};
}

// (90:0) {#if philVis}
function create_if_block_1(ctx) {
	var current;

	var modal = new Modal({
		props: {
		$$slots: {
		default: [create_default_slot_1],
		header: [create_header_slot_1]
	},
		$$scope: { ctx }
	},
		$$inline: true
	});
	modal.$on("close", ctx.close_handler_1);

	return {
		c: function create() {
			modal.$$.fragment.c();
		},

		l: function claim(nodes) {
			modal.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(modal, target, anchor);
			current = true;
		},

		i: function intro(local) {
			if (current) return;
			transition_in(modal.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(modal.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(modal, detaching);
		}
	};
}

// (92:8) <h2 class="modal-li" slot="header">
function create_header_slot_1(ctx) {
	var h2, t;

	return {
		c: function create() {
			h2 = element("h2");
			t = text("Philanthropy");
			this.h();
		},

		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true, slot: true }, false);
			var h2_nodes = children(h2);

			t = claim_text(h2_nodes, "Philanthropy");
			h2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(h2, "class", "modal-li svelte-6aq29p");
			attr(h2, "slot", "header");
			add_location(h2, file$1, 91, 8, 2176);
		},

		m: function mount(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h2);
			}
		}
	};
}

// (91:4) <Modal on:close="{() => philVis = false}">
function create_default_slot_1(ctx) {
	var t0, ul, li0, t1, t2, li1, t3, t4, li2, t5, t6, li3, t7, t8, li4, t9, t10, img;

	return {
		c: function create() {
			t0 = space();
			ul = element("ul");
			li0 = element("li");
			t1 = text("Lorem ipsum");
			t2 = space();
			li1 = element("li");
			t3 = text("Lorem ipsum");
			t4 = space();
			li2 = element("li");
			t5 = text("Lorem ipsum");
			t6 = space();
			li3 = element("li");
			t7 = text("Lorem ipsum");
			t8 = space();
			li4 = element("li");
			t9 = text("Lorem ipsum");
			t10 = space();
			img = element("img");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "\n        ");

			ul = claim_element(nodes, "UL", {}, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li0_nodes = children(li0);

			t1 = claim_text(li0_nodes, "Lorem ipsum");
			li0_nodes.forEach(detach);
			t2 = claim_text(ul_nodes, "\n            ");

			li1 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li1_nodes = children(li1);

			t3 = claim_text(li1_nodes, "Lorem ipsum");
			li1_nodes.forEach(detach);
			t4 = claim_text(ul_nodes, "\n            ");

			li2 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li2_nodes = children(li2);

			t5 = claim_text(li2_nodes, "Lorem ipsum");
			li2_nodes.forEach(detach);
			t6 = claim_text(ul_nodes, "\n            ");

			li3 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li3_nodes = children(li3);

			t7 = claim_text(li3_nodes, "Lorem ipsum");
			li3_nodes.forEach(detach);
			t8 = claim_text(ul_nodes, "\n            ");

			li4 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li4_nodes = children(li4);

			t9 = claim_text(li4_nodes, "Lorem ipsum");
			li4_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			t10 = claim_text(nodes, "\n        ");

			img = claim_element(nodes, "IMG", { src: true, alt: true, width: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(li0, "class", "modal-li svelte-6aq29p");
			add_location(li0, file$1, 93, 12, 2254);
			attr(li1, "class", "modal-li svelte-6aq29p");
			add_location(li1, file$1, 94, 12, 2304);
			attr(li2, "class", "modal-li svelte-6aq29p");
			add_location(li2, file$1, 95, 12, 2354);
			attr(li3, "class", "modal-li svelte-6aq29p");
			add_location(li3, file$1, 96, 12, 2404);
			attr(li4, "class", "modal-li svelte-6aq29p");
			add_location(li4, file$1, 97, 12, 2454);
			add_location(ul, file$1, 92, 8, 2237);
			attr(img, "src", "images/sigma_fun.jpg");
			attr(img, "alt", "sigmas having fun");
			attr(img, "width", "100%");
			add_location(img, file$1, 99, 8, 2514);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, ul, anchor);
			append(ul, li0);
			append(li0, t1);
			append(ul, t2);
			append(ul, li1);
			append(li1, t3);
			append(ul, t4);
			append(ul, li2);
			append(li2, t5);
			append(ul, t6);
			append(ul, li3);
			append(li3, t7);
			append(ul, t8);
			append(ul, li4);
			append(li4, t9);
			insert(target, t10, anchor);
			insert(target, img, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(ul);
				detach(t10);
				detach(img);
			}
		}
	};
}

// (104:0) {#if proVis}
function create_if_block(ctx) {
	var current;

	var modal = new Modal({
		props: {
		$$slots: {
		default: [create_default_slot],
		header: [create_header_slot]
	},
		$$scope: { ctx }
	},
		$$inline: true
	});
	modal.$on("close", ctx.close_handler_2);

	return {
		c: function create() {
			modal.$$.fragment.c();
		},

		l: function claim(nodes) {
			modal.$$.fragment.l(nodes);
		},

		m: function mount(target, anchor) {
			mount_component(modal, target, anchor);
			current = true;
		},

		i: function intro(local) {
			if (current) return;
			transition_in(modal.$$.fragment, local);

			current = true;
		},

		o: function outro(local) {
			transition_out(modal.$$.fragment, local);
			current = false;
		},

		d: function destroy(detaching) {
			destroy_component(modal, detaching);
		}
	};
}

// (106:8) <h2 class="modal-li" slot="header">
function create_header_slot(ctx) {
	var h2, t;

	return {
		c: function create() {
			h2 = element("h2");
			t = text("Professionalism");
			this.h();
		},

		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", { class: true, slot: true }, false);
			var h2_nodes = children(h2);

			t = claim_text(h2_nodes, "Professionalism");
			h2_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(h2, "class", "modal-li svelte-6aq29p");
			attr(h2, "slot", "header");
			add_location(h2, file$1, 105, 8, 2671);
		},

		m: function mount(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t);
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(h2);
			}
		}
	};
}

// (105:4) <Modal on:close="{() => proVis = false}">
function create_default_slot(ctx) {
	var t0, ul, li0, t1, t2, li1, t3, t4, li2, t5, t6, li3, t7, t8, li4, t9, t10, img;

	return {
		c: function create() {
			t0 = space();
			ul = element("ul");
			li0 = element("li");
			t1 = text("Lorem ipsum");
			t2 = space();
			li1 = element("li");
			t3 = text("Lorem ipsum");
			t4 = space();
			li2 = element("li");
			t5 = text("Lorem ipsum");
			t6 = space();
			li3 = element("li");
			t7 = text("Lorem ipsum");
			t8 = space();
			li4 = element("li");
			t9 = text("Lorem ipsum");
			t10 = space();
			img = element("img");
			this.h();
		},

		l: function claim(nodes) {
			t0 = claim_text(nodes, "\n        ");

			ul = claim_element(nodes, "UL", {}, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li0_nodes = children(li0);

			t1 = claim_text(li0_nodes, "Lorem ipsum");
			li0_nodes.forEach(detach);
			t2 = claim_text(ul_nodes, "\n            ");

			li1 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li1_nodes = children(li1);

			t3 = claim_text(li1_nodes, "Lorem ipsum");
			li1_nodes.forEach(detach);
			t4 = claim_text(ul_nodes, "\n            ");

			li2 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li2_nodes = children(li2);

			t5 = claim_text(li2_nodes, "Lorem ipsum");
			li2_nodes.forEach(detach);
			t6 = claim_text(ul_nodes, "\n            ");

			li3 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li3_nodes = children(li3);

			t7 = claim_text(li3_nodes, "Lorem ipsum");
			li3_nodes.forEach(detach);
			t8 = claim_text(ul_nodes, "\n            ");

			li4 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li4_nodes = children(li4);

			t9 = claim_text(li4_nodes, "Lorem ipsum");
			li4_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			t10 = claim_text(nodes, "\n        ");

			img = claim_element(nodes, "IMG", { src: true, alt: true, width: true }, false);
			var img_nodes = children(img);

			img_nodes.forEach(detach);
			this.h();
		},

		h: function hydrate() {
			attr(li0, "class", "modal-li svelte-6aq29p");
			add_location(li0, file$1, 107, 12, 2752);
			attr(li1, "class", "modal-li svelte-6aq29p");
			add_location(li1, file$1, 108, 12, 2802);
			attr(li2, "class", "modal-li svelte-6aq29p");
			add_location(li2, file$1, 109, 12, 2852);
			attr(li3, "class", "modal-li svelte-6aq29p");
			add_location(li3, file$1, 110, 12, 2902);
			attr(li4, "class", "modal-li svelte-6aq29p");
			add_location(li4, file$1, 111, 12, 2952);
			add_location(ul, file$1, 106, 8, 2735);
			attr(img, "src", "images/sigma_fun.jpg");
			attr(img, "alt", "sigmas having fun");
			attr(img, "width", "100%");
			add_location(img, file$1, 113, 8, 3012);
		},

		m: function mount(target, anchor) {
			insert(target, t0, anchor);
			insert(target, ul, anchor);
			append(ul, li0);
			append(li0, t1);
			append(ul, t2);
			append(ul, li1);
			append(li1, t3);
			append(ul, t4);
			append(ul, li2);
			append(li2, t5);
			append(ul, t6);
			append(ul, li3);
			append(li3, t7);
			append(ul, t8);
			append(ul, li4);
			append(li4, t9);
			insert(target, t10, anchor);
			insert(target, img, anchor);
		},

		p: noop,

		d: function destroy(detaching) {
			if (detaching) {
				detach(t0);
				detach(ul);
				detach(t10);
				detach(img);
			}
		}
	};
}

function create_fragment$1(ctx) {
	var ul, li0, img0, t0, span0, t1, t2, li1, img1, t3, span1, t4, t5, li2, img2, t6, span2, t7, t8, t9, t10, if_block2_anchor, current, dispose;

	var if_block0 = (ctx.broVis) && create_if_block_2(ctx);

	var if_block1 = (ctx.philVis) && create_if_block_1(ctx);

	var if_block2 = (ctx.proVis) && create_if_block(ctx);

	return {
		c: function create() {
			ul = element("ul");
			li0 = element("li");
			img0 = element("img");
			t0 = space();
			span0 = element("span");
			t1 = text("Brotherhood");
			t2 = space();
			li1 = element("li");
			img1 = element("img");
			t3 = space();
			span1 = element("span");
			t4 = text("Philanthropy");
			t5 = space();
			li2 = element("li");
			img2 = element("img");
			t6 = space();
			span2 = element("span");
			t7 = text("Professionalism");
			t8 = space();
			if (if_block0) if_block0.c();
			t9 = space();
			if (if_block1) if_block1.c();
			t10 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
			this.h();
		},

		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true }, false);
			var ul_nodes = children(ul);

			li0 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li0_nodes = children(li0);

			img0 = claim_element(li0_nodes, "IMG", { src: true, alt: true, class: true }, false);
			var img0_nodes = children(img0);

			img0_nodes.forEach(detach);
			t0 = claim_text(li0_nodes, "\n        ");

			span0 = claim_element(li0_nodes, "SPAN", { class: true }, false);
			var span0_nodes = children(span0);

			t1 = claim_text(span0_nodes, "Brotherhood");
			span0_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			t2 = claim_text(ul_nodes, "\n    ");

			li1 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li1_nodes = children(li1);

			img1 = claim_element(li1_nodes, "IMG", { src: true, alt: true, class: true }, false);
			var img1_nodes = children(img1);

			img1_nodes.forEach(detach);
			t3 = claim_text(li1_nodes, "\n        ");

			span1 = claim_element(li1_nodes, "SPAN", { class: true }, false);
			var span1_nodes = children(span1);

			t4 = claim_text(span1_nodes, "Philanthropy");
			span1_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			t5 = claim_text(ul_nodes, "\n    ");

			li2 = claim_element(ul_nodes, "LI", { class: true }, false);
			var li2_nodes = children(li2);

			img2 = claim_element(li2_nodes, "IMG", { src: true, alt: true, class: true }, false);
			var img2_nodes = children(img2);

			img2_nodes.forEach(detach);
			t6 = claim_text(li2_nodes, "\n        ");

			span2 = claim_element(li2_nodes, "SPAN", { class: true }, false);
			var span2_nodes = children(span2);

			t7 = claim_text(span2_nodes, "Professionalism");
			span2_nodes.forEach(detach);
			li2_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			t8 = claim_text(nodes, "\n\n");
			if (if_block0) if_block0.l(nodes);
			t9 = claim_text(nodes, "\n\n");
			if (if_block1) if_block1.l(nodes);
			t10 = claim_text(nodes, "\n\n");
			if (if_block2) if_block2.l(nodes);
			if_block2_anchor = empty();
			this.h();
		},

		h: function hydrate() {
			attr(img0, "src", "icons/pillar-white.png");
			attr(img0, "alt", "pillar");
			attr(img0, "class", "svelte-6aq29p");
			add_location(img0, file$1, 62, 8, 1231);
			attr(span0, "class", "svelte-6aq29p");
			add_location(span0, file$1, 63, 8, 1287);
			attr(li0, "class", "svelte-6aq29p");
			add_location(li0, file$1, 61, 4, 1187);
			attr(img1, "src", "icons/pillar-white.png");
			attr(img1, "alt", "pillar");
			attr(img1, "class", "svelte-6aq29p");
			add_location(img1, file$1, 66, 8, 1371);
			attr(span1, "class", "svelte-6aq29p");
			add_location(span1, file$1, 67, 8, 1427);
			attr(li1, "class", "svelte-6aq29p");
			add_location(li1, file$1, 65, 4, 1326);
			attr(img2, "src", "icons/pillar-white.png");
			attr(img2, "alt", "pillar");
			attr(img2, "class", "svelte-6aq29p");
			add_location(img2, file$1, 70, 8, 1511);
			attr(span2, "class", "svelte-6aq29p");
			add_location(span2, file$1, 71, 8, 1567);
			attr(li2, "class", "svelte-6aq29p");
			add_location(li2, file$1, 69, 4, 1467);
			attr(ul, "class", "pillared svelte-6aq29p");
			add_location(ul, file$1, 60, 0, 1161);

			dispose = [
				listen(li0, "click", ctx.click_handler),
				listen(li1, "click", ctx.click_handler_1),
				listen(li2, "click", ctx.click_handler_2)
			];
		},

		m: function mount(target, anchor) {
			insert(target, ul, anchor);
			append(ul, li0);
			append(li0, img0);
			append(li0, t0);
			append(li0, span0);
			append(span0, t1);
			append(ul, t2);
			append(ul, li1);
			append(li1, img1);
			append(li1, t3);
			append(li1, span1);
			append(span1, t4);
			append(ul, t5);
			append(ul, li2);
			append(li2, img2);
			append(li2, t6);
			append(li2, span2);
			append(span2, t7);
			insert(target, t8, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t9, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t10, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;
		},

		p: function update(changed, ctx) {
			if (ctx.broVis) {
				if (!if_block0) {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t9.parentNode, t9);
				} else {
									transition_in(if_block0, 1);
				}
			} else if (if_block0) {
				group_outros();
				transition_out(if_block0, 1, () => {
					if_block0 = null;
				});
				check_outros();
			}

			if (ctx.philVis) {
				if (!if_block1) {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t10.parentNode, t10);
				} else {
									transition_in(if_block1, 1);
				}
			} else if (if_block1) {
				group_outros();
				transition_out(if_block1, 1, () => {
					if_block1 = null;
				});
				check_outros();
			}

			if (ctx.proVis) {
				if (!if_block2) {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				} else {
									transition_in(if_block2, 1);
				}
			} else if (if_block2) {
				group_outros();
				transition_out(if_block2, 1, () => {
					if_block2 = null;
				});
				check_outros();
			}
		},

		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},

		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},

		d: function destroy(detaching) {
			if (detaching) {
				detach(ul);
				detach(t8);
			}

			if (if_block0) if_block0.d(detaching);

			if (detaching) {
				detach(t9);
			}

			if (if_block1) if_block1.d(detaching);

			if (detaching) {
				detach(t10);
			}

			if (if_block2) if_block2.d(detaching);

			if (detaching) {
				detach(if_block2_anchor);
			}

			run_all(dispose);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	

    let broVis = false;
    let philVis = false;
    let proVis = false;

	function click_handler() {
		const $$result = broVis = true;
		$$invalidate('broVis', broVis);
		return $$result;
	}

	function click_handler_1() {
		const $$result = philVis = true;
		$$invalidate('philVis', philVis);
		return $$result;
	}

	function click_handler_2() {
		const $$result = proVis = true;
		$$invalidate('proVis', proVis);
		return $$result;
	}

	function close_handler() {
		const $$result = broVis = false;
		$$invalidate('broVis', broVis);
		return $$result;
	}

	function close_handler_1() {
		const $$result = philVis = false;
		$$invalidate('philVis', philVis);
		return $$result;
	}

	function close_handler_2() {
		const $$result = proVis = false;
		$$invalidate('proVis', proVis);
		return $$result;
	}

	return {
		broVis,
		philVis,
		proVis,
		click_handler,
		click_handler_1,
		click_handler_2,
		close_handler,
		close_handler_1,
		close_handler_2
	};
}

class Pillars extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, []);
	}
}

export { Pillars as P, fly as a, fade as f };
